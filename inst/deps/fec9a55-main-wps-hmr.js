webpackHotUpdateextra_dash_ui_components("main",{

/***/ "./extra_dash_ui_components/nova-light/theme.css":
/*!*******************************************************!*\
  !*** ./extra_dash_ui_components/nova-light/theme.css ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./theme.css */ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/nova-light/theme.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"insertAt":"top","hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(true) {
	module.hot.accept(/*! !../../node_modules/css-loader/dist/cjs.js!./theme.css */ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/nova-light/theme.css", function() {
		var newContent = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./theme.css */ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/nova-light/theme.css");

		if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./extra_dash_ui_components/primeicons/fonts/primeicons.woff":
/*!*******************************************************************!*\
  !*** ./extra_dash_ui_components/primeicons/fonts/primeicons.woff ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "data:font/woff;base64,"

/***/ }),

/***/ "./extra_dash_ui_components/primeicons/primeicons.css":
/*!************************************************************!*\
  !*** ./extra_dash_ui_components/primeicons/primeicons.css ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./primeicons.css */ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/primeicons/primeicons.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"insertAt":"top","hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(true) {
	module.hot.accept(/*! !../../node_modules/css-loader/dist/cjs.js!./primeicons.css */ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/primeicons/primeicons.css", function() {
		var newContent = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./primeicons.css */ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/primeicons/primeicons.css");

		if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/nova-light/theme.css":
/*!*********************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/nova-light/theme.css ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "body\n    .p-organizationchart\n    .p-organizationchart-node-content.p-organizationchart-selectable-node:not(.p-highlight):hover {\n    background-color: #eaeaea;\n    color: #333333;\n}\nbody .p-organizationchart .p-organizationchart-node-content.p-highlight {\n    background-color: #007ad9;\n    color: #ffffff;\n}\nbody\n    .p-organizationchart\n    .p-organizationchart-node-content.p-highlight\n    .p-node-toggler\n    i {\n    color: #00325a;\n}\nbody .p-organizationchart .p-organizationchart-line-down {\n    background-color: #c8c8c8;\n}\nbody .p-organizationchart .p-organizationchart-line-left {\n    border-right: 1px solid #c8c8c8;\n    border-color: #c8c8c8;\n}\nbody .p-organizationchart .p-organizationchart-line-top {\n    border-top: 1px solid #c8c8c8;\n    border-color: #c8c8c8;\n}\nbody .p-organizationchart .p-organizationchart-node-content {\n    border: 1px solid #c8c8c8;\n    background-color: #ffffff;\n    color: #333333;\n    padding: 0.571em 1em;\n}\nbody .p-organizationchart .p-organizationchart-node-content .p-node-toggler {\n    bottom: -0.8em;\n    margin-left: -0.46em;\n    color: #848484;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    border-radius: 3px;\n    -moz-transition: box-shadow 0.2s;\n    -o-transition: box-shadow 0.2s;\n    -webkit-transition: box-shadow 0.2s;\n    transition: box-shadow 0.2s;\n}\nbody\n    .p-organizationchart\n    .p-organizationchart-node-content\n    .p-node-toggler:focus {\n    outline: 0 none;\n    outline-offset: 0;\n    -webkit-box-shadow: 0 0 0 0.2em #8dcdff;\n    -moz-box-shadow: 0 0 0 0.2em #8dcdff;\n    box-shadow: 0 0 0 0.2em #8dcdff;\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/primeicons/primeicons.css":
/*!**************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extra_dash_ui_components/primeicons/primeicons.css ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Imports
var getUrl = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ./fonts/primeicons.woff */ "./extra_dash_ui_components/primeicons/fonts/primeicons.woff"));
// Module
exports.push([module.i, "@font-face {\n    font-family: 'PrimeIcons';\n    font-display: auto;\n    src: \n        url(" + ___CSS_LOADER_URL___0___ + ") format('woff');\n    font-weight: normal;\n    font-style: normal;\n}\n\n.pi {\n    font-family: 'primeicons';\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    display: inline-block;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.pi-fw {\n    width: 1.28571429em;\n    text-align: center;\n}\n\n.pi-spin {\n    -webkit-animation: fa-spin 2s infinite linear;\n    animation: fa-spin 2s infinite linear;\n}\n\n@-webkit-keyframes fa-spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(359deg);\n        transform: rotate(359deg);\n    }\n}\n\n@keyframes fa-spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(359deg);\n        transform: rotate(359deg);\n    }\n}\n\n.pi-step-backward-alt:before {\n    content: '\\e9ac';\n}\n\n.pi-step-forward-alt:before {\n    content: '\\e9ad';\n}\n\n.pi-forward:before {\n    content: '\\e9ae';\n}\n\n.pi-backward:before {\n    content: '\\e9af';\n}\n\n.pi-fast-backward:before {\n    content: '\\e9b0';\n}\n\n.pi-fast-forward:before {\n    content: '\\e9b1';\n}\n\n.pi-pause:before {\n    content: '\\e9b2';\n}\n\n.pi-play:before {\n    content: '\\e9b3';\n}\n\n.pi-compass:before {\n    content: '\\e9ab';\n}\n\n.pi-id-card:before {\n    content: '\\e9aa';\n}\n\n.pi-ticket:before {\n    content: '\\e9a9';\n}\n\n.pi-file-o:before {\n    content: '\\e9a8';\n}\n\n.pi-reply:before {\n    content: '\\e9a7';\n}\n\n.pi-directions-alt:before {\n    content: '\\e9a5';\n}\n\n.pi-directions:before {\n    content: '\\e9a6';\n}\n\n.pi-thumbs-up:before {\n    content: '\\e9a3';\n}\n\n.pi-thumbs-down:before {\n    content: '\\e9a4';\n}\n\n.pi-sort-numeric-down-alt:before {\n    content: '\\e996';\n}\n\n.pi-sort-numeric-up-alt:before {\n    content: '\\e997';\n}\n\n.pi-sort-alpha-down-alt:before {\n    content: '\\e998';\n}\n\n.pi-sort-alpha-up-alt:before {\n    content: '\\e999';\n}\n\n.pi-sort-numeric-down:before {\n    content: '\\e99a';\n}\n\n.pi-sort-numeric-up:before {\n    content: '\\e99b';\n}\n\n.pi-sort-alpha-down:before {\n    content: '\\e99c';\n}\n\n.pi-sort-alpha-up:before {\n    content: '\\e99d';\n}\n\n.pi-sort-alt:before {\n    content: '\\e99e';\n}\n\n.pi-sort-amount-up:before {\n    content: '\\e99f';\n}\n\n.pi-sort-amount-down:before {\n    content: '\\e9a0';\n}\n\n.pi-sort-amount-down-alt:before {\n    content: '\\e9a1';\n}\n\n.pi-sort-amount-up-alt:before {\n    content: '\\e9a2';\n}\n\n.pi-palette:before {\n    content: '\\e995';\n}\n\n.pi-undo:before {\n    content: '\\e994';\n}\n\n.pi-desktop:before {\n    content: '\\e993';\n}\n\n.pi-sliders-v:before {\n    content: '\\e991';\n}\n\n.pi-sliders-h:before {\n    content: '\\e992';\n}\n\n.pi-search-plus:before {\n    content: '\\e98f';\n}\n\n.pi-search-minus:before {\n    content: '\\e990';\n}\n\n.pi-file-excel:before {\n    content: '\\e98e';\n}\n\n.pi-file-pdf:before {\n    content: '\\e98d';\n}\n\n.pi-check-square:before {\n    content: '\\e98c';\n}\n\n.pi-chart-line:before {\n    content: '\\e98b';\n}\n\n.pi-user-edit:before {\n    content: '\\e98a';\n}\n\n.pi-exclamation-circle:before {\n    content: '\\e989';\n}\n\n.pi-android:before {\n    content: '\\e985';\n}\n\n.pi-google:before {\n    content: '\\e986';\n}\n\n.pi-apple:before {\n    content: '\\e987';\n}\n\n.pi-microsoft:before {\n    content: '\\e988';\n}\n\n.pi-heart:before {\n    content: '\\e984';\n}\n\n.pi-mobile:before {\n    content: '\\e982';\n}\n\n.pi-tablet:before {\n    content: '\\e983';\n}\n\n.pi-key:before {\n    content: '\\e981';\n}\n\n.pi-shopping-cart:before {\n    content: '\\e980';\n}\n\n.pi-comments:before {\n    content: '\\e97e';\n}\n\n.pi-comment:before {\n    content: '\\e97f';\n}\n\n.pi-briefcase:before {\n    content: '\\e97d';\n}\n\n.pi-bell:before {\n    content: '\\e97c';\n}\n\n.pi-paperclip:before {\n    content: '\\e97b';\n}\n\n.pi-share-alt:before {\n    content: '\\e97a';\n}\n\n.pi-envelope:before {\n    content: '\\e979';\n}\n\n.pi-volume-down:before {\n    content: '\\e976';\n}\n\n.pi-volume-up:before {\n    content: '\\e977';\n}\n\n.pi-volume-off:before {\n    content: '\\e978';\n}\n\n.pi-eject:before {\n    content: '\\e975';\n}\n\n.pi-money-bill:before {\n    content: '\\e974';\n}\n\n.pi-images:before {\n    content: '\\e973';\n}\n\n.pi-image:before {\n    content: '\\e972';\n}\n\n.pi-sign-in:before {\n    content: '\\e970';\n}\n\n.pi-sign-out:before {\n    content: '\\e971';\n}\n\n.pi-wifi:before {\n    content: '\\e96f';\n}\n\n.pi-sitemap:before {\n    content: '\\e96e';\n}\n\n.pi-chart-bar:before {\n    content: '\\e96d';\n}\n\n.pi-camera:before {\n    content: '\\e96c';\n}\n\n.pi-dollar:before {\n    content: '\\e96b';\n}\n\n.pi-lock-open:before {\n    content: '\\e96a';\n}\n\n.pi-table:before {\n    content: '\\e969';\n}\n\n.pi-map-marker:before {\n    content: '\\e968';\n}\n\n.pi-list:before {\n    content: '\\e967';\n}\n\n.pi-eye-slash:before {\n    content: '\\e965';\n}\n\n.pi-eye:before {\n    content: '\\e966';\n}\n\n.pi-folder-open:before {\n    content: '\\e964';\n}\n\n.pi-folder:before {\n    content: '\\e963';\n}\n\n.pi-video:before {\n    content: '\\e962';\n}\n\n.pi-inbox:before {\n    content: '\\e961';\n}\n\n.pi-lock:before {\n    content: '\\e95f';\n}\n\n.pi-unlock:before {\n    content: '\\e960';\n}\n\n.pi-tags:before {\n    content: '\\e95d';\n}\n\n.pi-tag:before {\n    content: '\\e95e';\n}\n\n.pi-power-off:before {\n    content: '\\e95c';\n}\n\n.pi-save:before {\n    content: '\\e95b';\n}\n\n.pi-question-circle:before {\n    content: '\\e959';\n}\n\n.pi-question:before {\n    content: '\\e95a';\n}\n\n.pi-copy:before {\n    content: '\\e957';\n}\n\n.pi-file:before {\n    content: '\\e958';\n}\n\n.pi-clone:before {\n    content: '\\e955';\n}\n\n.pi-calendar-times:before {\n    content: '\\e952';\n}\n\n.pi-calendar-minus:before {\n    content: '\\e953';\n}\n\n.pi-calendar-plus:before {\n    content: '\\e954';\n}\n\n.pi-ellipsis-v:before {\n    content: '\\e950';\n}\n\n.pi-ellipsis-h:before {\n    content: '\\e951';\n}\n\n.pi-bookmark:before {\n    content: '\\e94e';\n}\n\n.pi-globe:before {\n    content: '\\e94f';\n}\n\n.pi-replay:before {\n    content: '\\e94d';\n}\n\n.pi-filter:before {\n    content: '\\e94c';\n}\n\n.pi-print:before {\n    content: '\\e94b';\n}\n\n.pi-align-right:before {\n    content: '\\e946';\n}\n\n.pi-align-left:before {\n    content: '\\e947';\n}\n\n.pi-align-center:before {\n    content: '\\e948';\n}\n\n.pi-align-justify:before {\n    content: '\\e949';\n}\n\n.pi-cog:before {\n    content: '\\e94a';\n}\n\n.pi-cloud-download:before {\n    content: '\\e943';\n}\n\n.pi-cloud-upload:before {\n    content: '\\e944';\n}\n\n.pi-cloud:before {\n    content: '\\e945';\n}\n\n.pi-pencil:before {\n    content: '\\e942';\n}\n\n.pi-users:before {\n    content: '\\e941';\n}\n\n.pi-clock:before {\n    content: '\\e940';\n}\n\n.pi-user-minus:before {\n    content: '\\e93e';\n}\n\n.pi-user-plus:before {\n    content: '\\e93f';\n}\n\n.pi-trash:before {\n    content: '\\e93d';\n}\n\n.pi-external-link:before {\n    content: '\\e93c';\n}\n\n.pi-window-maximize:before {\n    content: '\\e93b';\n}\n\n.pi-window-minimize:before {\n    content: '\\e93a';\n}\n\n.pi-refresh:before {\n    content: '\\e938';\n}\n\n.pi-user:before {\n    content: '\\e939';\n}\n\n.pi-exclamation-triangle:before {\n    content: '\\e922';\n}\n\n.pi-calendar:before {\n    content: '\\e927';\n}\n\n.pi-chevron-circle-left:before {\n    content: '\\e928';\n}\n\n.pi-chevron-circle-down:before {\n    content: '\\e929';\n}\n\n.pi-chevron-circle-right:before {\n    content: '\\e92a';\n}\n\n.pi-chevron-circle-up:before {\n    content: '\\e92b';\n}\n\n.pi-angle-double-down:before {\n    content: '\\e92c';\n}\n\n.pi-angle-double-left:before {\n    content: '\\e92d';\n}\n\n.pi-angle-double-right:before {\n    content: '\\e92e';\n}\n\n.pi-angle-double-up:before {\n    content: '\\e92f';\n}\n\n.pi-angle-down:before {\n    content: '\\e930';\n}\n\n.pi-angle-left:before {\n    content: '\\e931';\n}\n\n.pi-angle-right:before {\n    content: '\\e932';\n}\n\n.pi-angle-up:before {\n    content: '\\e933';\n}\n\n.pi-upload:before {\n    content: '\\e934';\n}\n\n.pi-download:before {\n    content: '\\e956';\n}\n\n.pi-ban:before {\n    content: '\\e935';\n}\n\n.pi-star-o:before {\n    content: '\\e936';\n}\n\n.pi-star:before {\n    content: '\\e937';\n}\n\n.pi-chevron-left:before {\n    content: '\\e900';\n}\n\n.pi-chevron-right:before {\n    content: '\\e901';\n}\n\n.pi-chevron-down:before {\n    content: '\\e902';\n}\n\n.pi-chevron-up:before {\n    content: '\\e903';\n}\n\n.pi-caret-left:before {\n    content: '\\e904';\n}\n\n.pi-caret-right:before {\n    content: '\\e905';\n}\n\n.pi-caret-down:before {\n    content: '\\e906';\n}\n\n.pi-caret-up:before {\n    content: '\\e907';\n}\n\n.pi-search:before {\n    content: '\\e908';\n}\n\n.pi-check:before {\n    content: '\\e909';\n}\n\n.pi-check-circle:before {\n    content: '\\e90a';\n}\n\n.pi-times:before {\n    content: '\\e90b';\n}\n\n.pi-times-circle:before {\n    content: '\\e90c';\n}\n\n.pi-plus:before {\n    content: '\\e90d';\n}\n\n.pi-plus-circle:before {\n    content: '\\e90e';\n}\n\n.pi-minus:before {\n    content: '\\e90f';\n}\n\n.pi-minus-circle:before {\n    content: '\\e910';\n}\n\n.pi-circle-on:before {\n    content: '\\e911';\n}\n\n.pi-circle-off:before {\n    content: '\\e912';\n}\n\n.pi-sort-down:before {\n    content: '\\e913';\n}\n\n.pi-sort-up:before {\n    content: '\\e914';\n}\n\n.pi-sort:before {\n    content: '\\e915';\n}\n\n.pi-step-backward:before {\n    content: '\\e916';\n}\n\n.pi-step-forward:before {\n    content: '\\e917';\n}\n\n.pi-th-large:before {\n    content: '\\e918';\n}\n\n.pi-arrow-down:before {\n    content: '\\e919';\n}\n\n.pi-arrow-left:before {\n    content: '\\e91a';\n}\n\n.pi-arrow-right:before {\n    content: '\\e91b';\n}\n\n.pi-arrow-up:before {\n    content: '\\e91c';\n}\n\n.pi-bars:before {\n    content: '\\e91d';\n}\n\n.pi-arrow-circle-down:before {\n    content: '\\e91e';\n}\n\n.pi-arrow-circle-left:before {\n    content: '\\e91f';\n}\n\n.pi-arrow-circle-right:before {\n    content: '\\e920';\n}\n\n.pi-arrow-circle-up:before {\n    content: '\\e921';\n}\n\n.pi-info:before {\n    content: '\\e923';\n}\n\n.pi-info-circle:before {\n    content: '\\e924';\n}\n\n.pi-home:before {\n    content: '\\e925';\n}\n\n.pi-spinner:before {\n    content: '\\e926';\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Inputtext/InputText.css":
/*!******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/lib/components/Inputtext/InputText.css ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".p-inputtext {\n    /* margin: 0;\n    outline: medium none;\n    padding: .25em;\n    font-weight: normal; */\n    font-size: 14px; \n    color: #333333;\n    background: #ffffff;\n    padding: 0.429em;\n    border: 1px solid #a6a6a6;\n    -moz-transition: border-color 0.2s, box-shadow 0.2s;\n    -o-transition: border-color 0.2s, box-shadow 0.2s;\n    -webkit-transition: border-color 0.2s, box-shadow 0.2s;\n    transition: border-color 0.2s, box-shadow 0.2s;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    border-radius: 3px;\n}\n\n.p-fluid .p-inputtext {\n    width: 100%;\n    box-sizing: border-box;\n    -webkit-box-sizing:border-box;\n    -moz-box-sizing: border-box;\n}\n\n.p-inputgroup {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n}\n\n.p-inputgroup .p-inputgroup-addon {\n    display: inline-block;\n    text-align: center;\n    min-width: 1.5em;\n    padding: .25em;\n    border-width: 1px;\n    border-style: solid;\n}\n\n.p-inputgroup .p-inputgroup-addon + .p-inputgroup-addon {\n    border-left: 0 none;\n}\n\n.p-inputgroup .p-inputtext {\n    padding-left: .5em;\n}\n\n.p-inputgroup > .p-inputtext:not(:first-child),\n.p-inputgroup > .p-inputtextarea:not(:first-child),\n.p-inputgroup > .p-calendar:not(:first-child) > .p-inputtext,\n.p-inputgroup > .p-chips:not(:first-child) > .p-inputtext,\n.p-inputgroup > .p-dropdown:not(:first-child),\n.p-inputgroup > .p-multiselect:not(:first-child),\n.p-inputgroup > .p-selectbutton:not(:first-child) > .p-button,\n.p-inputgroup > .p-autocomplete:not(:first-child) > .p-autocomplete-input,\n.p-inputgroup > .p-spinner:not(:first-child),\n.p-inputgroup > .p-spinner:not(:first-child) > .p-spinner-input {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    border-left: 0 none;\n}\n\n.p-inputgroup > .p-inputtext:not(:last-child),\n.p-inputgroup > .p-inputtextarea:not(:last-child),\n.p-inputgroup > .p-calendar:not(:last-child) > .p-inputtext,\n.p-inputgroup > .p-chips:not(:last-child) > .p-inputtext,\n.p-inputgroup > .p-dropdown:not(:last-child),\n.p-inputgroup > .p-multiselect:not(:last-child),\n.p-inputgroup > .p-selectbutton:not(:last-child) > .p-button,\n.p-inputgroup > .p-autocomplete:not(:last-child) > .p-autocomplete-input,\n.p-inputgroup > .p-spinner:not(:last-child),\n.p-inputgroup > .p-spinner:not(:last-child) > .p-spinner-input,\n.p-inputgroup > .p-spinner:not(:last-child) > .p-spinner-button {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    border-right: 0 none;\n}\n\n.p-inputgroup .p-button {\n    margin-right: 0;\n    border-radius: 0;\n}\n\n.p-fluid .p-inputgroup .p-button {\n    width: auto;\n}\n\n.p-fluid .p-inputgroup .p-inputtext {\n    -webkit-box-flex: 1;\n    -webkit-flex: 1 1 auto;\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n}\n\n.p-inputgroup .p-checkbox, \n.p-inputgroup .p-radiobutton {\n    margin-right: 0;\n    vertical-align: bottom;\n}\n\n/* Floating Label */\n.p-float-label > input:focus ~ label,\n.p-float-label > input.p-filled ~ label,\n.p-float-label > .p-inputwrapper-focus ~ label,\n.p-float-label > .p-inputwrapper-filled ~ label {\n  top:-.75em;\n  font-size:12px;\n}\n\n.p-float-label > input:-webkit-autofill ~ label {\n  top:-.75em;\n  font-size:12px;\n}\n\n\n\n/*Tooltip */\n.p-tooltip {\n    position:absolute;\n    display:none;\n    padding: .25em .5em;\n    max-width: 12.5em;\n}\n\n.p-tooltip.p-tooltip-right,\n.p-tooltip.p-tooltip-left {\n    padding: 0 .25em;\n}\n\n.p-tooltip.p-tooltip-top,\n.p-tooltip.p-tooltip-bottom {\n    padding:.25em 0;\n}\n\n.p-tooltip .p-tooltip-text {\n   padding: .125em .5em;\n   background-color: rgb(76, 76, 76);\n   color: #ffffff;\n   white-space: pre-line;\n}\n\n.p-tooltip-arrow {\n    position: absolute;\n    width: 0;\n    height: 0;\n    border-color: transparent;\n    border-style: solid;\n}\n\n.p-tooltip-right .p-tooltip-arrow {\n    top: 50%;\n    left: 0;\n    margin-top: -.25em;\n    border-width: .25em .25em .25em 0;\n    border-right-color: rgb(76, 76, 76);\n}\n\n.p-tooltip-left .p-tooltip-arrow {\n    top: 50%;\n    right: 0;\n    margin-top: -.25em;\n    border-width: .25em 0 .25em .25em;\n    border-left-color: rgb(76, 76, 76);\n}\n\n.p-tooltip.p-tooltip-top {\n    padding: .25em 0;\n}\n\n.p-tooltip-top .p-tooltip-arrow {\n    bottom: 0;\n    left: 50%;\n    margin-left: -.25em;\n    border-width: .25em .25em 0;\n    border-top-color: rgb(76, 76, 76);\n}\n\n.p-tooltip-bottom .p-tooltip-arrow {\n    top: 0;\n    left: 50%;\n    margin-left: -.25em;\n    border-width: 0 .25em .25em;\n    border-bottom-color: rgb(76, 76, 76);\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/ListBox/ListBox.css":
/*!**************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/lib/components/ListBox/ListBox.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "body .p-listbox {\n    padding: 0.25em;\n    width: 10em;\n}\nbody .p-listbox .p-listbox-list-wrapper {\n    overflow: auto;\n}\nbody .p-listbox .p-listbox-list {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n}\nbody .p-listbox .p-listbox-item {\n    padding: 0.25em;\n    border: 0 none;\n    cursor: pointer;\n    font-weight: normal;\n    margin-bottom: 1px;\n}\nbody .p-listbox .p-listbox-item > span {\n    vertical-align: middle;\n}\nbody .p-listbox .p-listbox-item:last-child {\n    margin-bottom: 0;\n}\nbody .p-listbox.p-disabled .p-listbox-item {\n    cursor: default;\n}\nbody .p-listbox-header {\n    margin-bottom: 0.3em;\n    padding: 0.125em 0.2em;\n    position: relative;\n}\nbody .p-listbox-header .p-checkbox {\n    display: inline-block;\n    vertical-align: middle;\n    cursor: pointer;\n}\nbody .p-listbox-header .p-listbox-filter-container {\n    display: inline-block;\n    vertical-align: middle;\n    position: relative;\n    width: 100%;\n}\nbody .p-listbox-header .p-listbox-filter-container .p-listbox-filter-icon {\n    position: absolute;\n    top: 0.25em;\n    left: 0.25em;\n    position: absolute;\n    top: 0.25em;\n    left: 0.25em;\n}\nbody .p-listbox-header .p-inputtext {\n    padding: 0.125em 0.125em 0.125em 1.25em;\n    width: 100%;\n    padding: 0.125em 0.125em 0.125em 1.25em;\n    width: 100%;\n}\nbody .p-listbox-header.p-listbox-header-w-checkbox .p-listbox-filter-container {\n    width: calc(100% - 2em);\n}\nbody .p-listbox .p-listbox-header .p-listbox-filter-container .p-listbox-filter-icon {\n    top: 50%;\n    left: auto;\n    margin-top: -0.5em;\n    right: 0.5em;\n    color: #007ad9;\n}\nbody .p-listbox .p-listbox-header .p-listbox-filter-container input {\n    padding: 0.429em;\n    padding-right: 2em;\n}\nbody .p-listbox .p-listbox-list .p-listbox-item.p-highlight {\n    color: #fff;\n    background-color: #007ad9;\n}\nbody .p-listbox .p-listbox-list .p-listbox-item {\n    margin: 0;\n    padding: 0.429em 0.857em;\n    border: 0 none;\n    color: #333;\n    background-color: transparent;\n    -moz-transition: background-color 0.2s, box-shadow 0.2s;\n    -o-transition: background-color 0.2s, box-shadow 0.2s;\n    -webkit-transition: background-color 0.2s, box-shadow 0.2s;\n    transition: background-color 0.2s, box-shadow 0.2s;\n    -moz-border-radius: 0;\n    -webkit-border-radius: 0;\n    border-radius: 0;\n}\nbody .pi {\n    font-size: 1.25em;\n}\nbody .p-inputtext {\n    font-size: 14px;\n    color: #333;\n    background: #fff;\n    padding: 0.429em;\n    border: 1px solid #a6a6a6;\n    -moz-transition: border-color 0.2s, box-shadow 0.2s;\n    -o-transition: border-color 0.2s, box-shadow 0.2s;\n    -webkit-transition: border-color 0.2s, box-shadow 0.2s;\n    transition: border-color 0.2s, box-shadow 0.2s;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    border-radius: 3px;\n}\nbody .p-component {\n    font-family: 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 14px;\n    text-decoration: none;\n}\n.pi {\n    font-family: 'primeicons';\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    display: inline-block;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n* {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/OrganizationChart/OrganizationChart.css":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/lib/components/OrganizationChart/OrganizationChart.css ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".p-organizationchart .p-organizationchart-table {\n    border-spacing: 0;\n    border-collapse: separate;\n    margin: 0 auto;\n}\n\n.p-organizationchart .p-organizationchart-table > tbody > tr > td {\n    text-align: center;\n    vertical-align: top;\n    padding: 0;\n    padding: 0 0.75em;\n}\n\n.p-organizationchart .p-organizationchart-node-content {\n    padding: 0.5em 0.75em;\n    display: inline-block;\n    position: relative;\n    border-radius: 5px;\n}\n\n.p-organizationchart .p-organizationchart-node-content .p-node-toggler {\n    position: absolute;\n    bottom: -9px;\n    margin-left: -8px;\n    z-index: 2;\n    left: 50%;\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n}\n\n.p-organizationchart .p-organizationchart-line-down {\n    margin: 0 auto;\n    height: 20px;\n    width: 1px;\n    float: none;\n}\n\n.p-organizationchart .p-organizationchart-line-right {\n    float: none;\n    border-radius: 0px;\n}\n\n.p-organizationchart .p-organizationchart-line-left {\n    float: none;\n    border-radius: 0;\n}\n\n.p-organizationchart\n    .p-organizationchart-node-content.p-organizationchart-selectable-node {\n    cursor: pointer;\n}\n\n.arrow-down {\n    background-size: cover;\n    /* background-image: url('../../../assets/arrowdown.svg'); */\n    width: 30px;\n    margin-left: -8px;\n}\n.arrow-up {\n    background-size: cover;\n    /* background-image: url('../../../assets/arrowdown.svg'); */\n    width: 30px;\n    margin-left: -8px;\n}\n\n.node-header,\n.node-content {\n    padding: 0.5em 0.7em;\n}\n\n.node-header {\n    background-color: #495ebb;\n    color: #ffffff;\n    border-radius: 5px 5px 0 0;\n}\n\n.node-content {\n    text-align: center;\n    border: 1px solid #495ebb;\n    border-radius: 0 0 5px 5px;\n}\n\n.node-content img {\n    border-radius: 50%;\n}\n\n.p-organizationchart .p-organizationchart-node-content.p-person {\n    padding: 0;\n    border: 0 none;\n}\n\n.node-card {\n    border-radius: 20px;\n}\n\n.p-link {\n    text-align: left;\n    background-color: transparent;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    cursor: pointer;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Rating/Rating.css":
/*!************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/lib/components/Rating/Rating.css ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".p-rating .p-rating-icon {\n    cursor: pointer;\n}\n\n.p-rating {\n    font-size: 1.25em;\n}\n\n.p-rating.p-disabled .p-rating-icon,\n.p-rating.p-rating-readonly .p-rating-icon {\n    cursor: default;\n}\n\nbody .p-rating .p-rating-icon.p-rating-cancel {\n    color: #e4018d;\n}\nbody .p-rating .p-rating-icon {\n    font-size: 20px;\n    text-align: center;\n    display: inline-block;\n    color: #333333;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    border-radius: 3px;\n    -moz-transition: color 0.2s, box-shadow 0.2s;\n    -o-transition: color 0.2s, box-shadow 0.2s;\n    -webkit-transition: color 0.2s, box-shadow 0.2s;\n    transition: color 0.2s, box-shadow 0.2s;\n}\n\n.p-rating .p-rating-icon {\n    cursor: pointer;\n}\nbody .pi {\n    font-size: 1.25em;\n}\n.pi {\n    font-family: 'primeicons';\n    speak: none;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    display: inline-block;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n* {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\nbody .p-disabled, body .p-component:disabled {\n    opacity: 0.5;\n    filter: alpha(opacity=50);\n}\n\nbody {\n    margin: 0;\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: auto;\n    background-color: #f6f6f6;\n    font-family: Open Sans,Helvetica Neue,sans-serif; \n    font-weight: 400;\n    color: #333;\n    -webkit-font-smoothing: antialiased;\n    font-size: 14px;\n}", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], "{").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      // eslint-disable-next-line prefer-destructuring
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = modules[_i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (url, needQuotes) {
  // eslint-disable-next-line no-underscore-dangle, no-param-reassign
  url = url.__esModule ? url.default : url;

  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.11.0
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_LAZY_TYPE:
      case REACT_MEMO_TYPE:
      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true;
      lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.typeOf = typeOf;
exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isValidElementType = isValidElementType;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./src/demo/App.js":
/*!*************************!*\
  !*** ./src/demo/App.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib */ "./src/lib/index.js");
/* harmony import */ var _sampleData_orgChartData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sampleData/orgChartData */ "./src/demo/sampleData/orgChartData.js");
/* harmony import */ var _sampleData_listComponentData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampleData/listComponentData */ "./src/demo/sampleData/listComponentData.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/* eslint no-magic-numbers: 0 */





var App =
/*#__PURE__*/
function (_Component) {
  _inherits(App, _Component);

  function App() {
    var _this;

    _classCallCheck(this, App);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));
    _this.state = {
      value: '',
      data: _sampleData_orgChartData__WEBPACK_IMPORTED_MODULE_2__["default"].data,
      data1: _sampleData_orgChartData__WEBPACK_IMPORTED_MODULE_2__["default"].data1,
      selection: null
    };
    _this.setProps = _this.setProps.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(App, [{
    key: "setProps",
    value: function setProps(newProps) {
      console.log(newProps);
      this.setState(newProps);
    }
  }, {
    key: "render",
    value: function render() {
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_lib__WEBPACK_IMPORTED_MODULE_1__["RatingComponent"], {
        value: this.state.value,
        setProps: this.setProps,
        cancel: true
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_lib__WEBPACK_IMPORTED_MODULE_1__["ExtraDashUiComponents"], {
        setProps: this.setProps,
        value: this.state.value
      }));
    }
  }]);

  return App;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (App);

/***/ }),

/***/ "./src/demo/sampleData/listComponentData.js":
/*!**************************************************!*\
  !*** ./src/demo/sampleData/listComponentData.js ***!
  \**************************************************/
/*! exports provided: cities, cars */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cities", function() { return cities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cars", function() { return cars; });
var image = 'https://res.cloudinary.com/danuluma/image/upload/v1541124041/hqauvuw88xt5mgntkf8r.png';
var cities = [{
  label: 'New York',
  value: 'NY'
}, {
  label: 'Rome',
  value: 'RM'
}, {
  label: 'London',
  value: 'LDN'
}, {
  label: 'Istanbul',
  value: 'IST'
}, {
  label: 'Paris',
  value: 'PRS'
}];
var cars = [{
  label: 'Audi',
  value: 'Audi',
  imagePath: image
}, {
  label: 'BMW',
  value: 'BMW',
  imagePath: image
}, {
  label: 'Fiat',
  value: 'Fiat',
  imagePath: image
}, {
  label: 'Honda',
  value: 'Honda',
  imagePath: image
}, {
  label: 'Jaguar',
  value: 'Jaguar',
  imagePath: image
}, {
  label: 'Mercedes',
  value: 'Mercedes',
  imagePath: image
}, {
  label: 'Renault',
  value: 'Renault',
  imagePath: image
}, {
  label: 'VW',
  value: 'VW',
  imagePath: image
}, {
  label: 'Volvo',
  value: 'Volvo',
  imagePath: image
}];

/***/ }),

/***/ "./src/demo/sampleData/orgChartData.js":
/*!*********************************************!*\
  !*** ./src/demo/sampleData/orgChartData.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  data: [{
    label: 'F.C Barcelona',
    expanded: true,
    children: [{
      label: 'F.C Barcelona',
      expanded: true,
      children: [{
        label: 'Chelsea FC'
      }, {
        label: 'F.C. Barcelona'
      }]
    }, {
      label: 'Real Madrid',
      expanded: true,
      children: [{
        label: 'Bayern Munich'
      }, {
        label: 'Real Madrid'
      }]
    }]
  }],
  data1: [{
    label: 'CEO',
    type: 'person',
    className: 'p-person',
    expanded: true,
    data: {
      name: 'Walter White',
      avatar: 'https://res.cloudinary.com/danuluma/image/asset/v1532478604/back-108ba11cfbaffa537052c716e40005b7.png'
    },
    children: [{
      label: 'CFO',
      type: 'person',
      className: 'p-person',
      expanded: true,
      data: {
        name: 'Saul Goodman',
        avatar: 'https://res.cloudinary.com/danuluma/image/asset/v1532478604/back-108ba11cfbaffa537052c716e40005b7.png'
      },
      children: [{
        label: 'Tax',
        className: 'department-cfo'
      }, {
        label: 'Legal',
        className: 'department-cfo'
      }]
    }, {
      label: 'COO',
      type: 'person',
      className: 'p-person',
      expanded: true,
      data: {
        name: 'Mike E.',
        avatar: 'https://res.cloudinary.com/danuluma/image/asset/v1532478604/back-108ba11cfbaffa537052c716e40005b7.png'
      },
      children: [{
        label: 'Operations',
        className: 'department-coo'
      }]
    }, {
      label: 'CTO',
      type: 'person',
      className: 'p-person',
      expanded: true,
      data: {
        name: 'Jesse Pinkman',
        avatar: 'https://res.cloudinary.com/danuluma/image/asset/v1532478604/back-108ba11cfbaffa537052c716e40005b7.png'
      },
      children: [{
        label: 'Development',
        className: 'department-cto',
        expanded: true,
        children: [{
          label: 'Analysis',
          className: 'department-cto'
        }, {
          label: 'Front End',
          className: 'department-cto'
        }, {
          label: 'Back End',
          className: 'department-cto'
        }]
      }, {
        label: 'QA',
        className: 'department-cto'
      }, {
        label: 'R&D',
        className: 'department-cto'
      }]
    }]
  }]
});

/***/ }),

/***/ "./src/lib/components/ExtraDashUiComponents.react.js":
/*!***********************************************************!*\
  !*** ./src/lib/components/ExtraDashUiComponents.react.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ExtraDashUiComponents; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



/**
 * ExampleComponent is an example component.
 * It takes a property, `label`, and
 * displays it.
 * It renders an input with the property `value`
 * which is editable by the user.
 */

var ExtraDashUiComponents =
/*#__PURE__*/
function (_Component) {
  _inherits(ExtraDashUiComponents, _Component);

  function ExtraDashUiComponents() {
    _classCallCheck(this, ExtraDashUiComponents);

    return _possibleConstructorReturn(this, _getPrototypeOf(ExtraDashUiComponents).apply(this, arguments));
  }

  _createClass(ExtraDashUiComponents, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          label = _this$props.label,
          setProps = _this$props.setProps,
          value = _this$props.value;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        id: id
      }, "ExampleComponent: ", label, "\xA0", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        value: value,
        onChange:
        /*
         * Send the new value to the parent component.
         * setProps is a prop that is automatically supplied
         * by dash's front-end ("dash-renderer").
         * In a Dash app, this will update the component's
         * props and send the data back to the Python Dash
         * app server if a callback uses the modified prop as
         * Input or State.
         */
        function onChange(e) {
          return setProps({
            value: e.target.value
          });
        }
      }));
    }
  }]);

  return ExtraDashUiComponents;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);


ExtraDashUiComponents.defaultProps = {};
ExtraDashUiComponents.propTypes = {
  /**
   * The ID used to identify this component in Dash callbacks.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * A label that will be printed when this component is rendered.
   */
  label: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string.isRequired,

  /**
   * The value displayed in the input.
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Dash-assigned callback that should be called to report property changes
   * to Dash, to make them available for callbacks.
   */
  setProps: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func
};

/***/ }),

/***/ "./src/lib/components/Inputtext/InputText.css":
/*!****************************************************!*\
  !*** ./src/lib/components/Inputtext/InputText.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./InputText.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Inputtext/InputText.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"insertAt":"top","hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(true) {
	module.hot.accept(/*! !../../../../node_modules/css-loader/dist/cjs.js!./InputText.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Inputtext/InputText.css", function() {
		var newContent = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./InputText.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Inputtext/InputText.css");

		if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/lib/components/Inputtext/InputText.js":
/*!***************************************************!*\
  !*** ./src/lib/components/Inputtext/InputText.js ***!
  \***************************************************/
/*! exports provided: InputText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputText", function() { return InputText; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_KeyFilter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/KeyFilter */ "./src/lib/utils/KeyFilter.js");
/* harmony import */ var _utils_ToolTip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ToolTip */ "./src/lib/utils/ToolTip.js");
/* harmony import */ var _utils_DomHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/DomHandler */ "./src/lib/utils/DomHandler.js");
/* harmony import */ var _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/ObjectUtils */ "./src/lib/utils/ObjectUtils.js");
/* harmony import */ var _InputText_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./InputText.css */ "./src/lib/components/Inputtext/InputText.css");
/* harmony import */ var _InputText_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_InputText_css__WEBPACK_IMPORTED_MODULE_7__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }









/**
 * InputText Bar.
 * displays on top of the search box component if filter is set to true
 */

var InputText =
/*#__PURE__*/
function (_Component) {
  _inherits(InputText, _Component);

  function InputText(props) {
    var _this;

    _classCallCheck(this, InputText);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputText).call(this, props));
    _this.onInput = _this.onInput.bind(_assertThisInitialized(_this));
    _this.onKeyPress = _this.onKeyPress.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(InputText, [{
    key: "onKeyPress",
    value: function onKeyPress(event) {
      if (this.props.onKeyPress) {
        this.props.onKeyPress(event);
      }

      if (this.props.keyfilter) {
        _utils_KeyFilter__WEBPACK_IMPORTED_MODULE_3__["default"].onKeyPress(event, this.props.keyfilter, this.props.validateOnly);
      }
    }
  }, {
    key: "onInput",
    value: function onInput(event) {
      var validatePattern = true;

      if (this.props.keyfilter && this.props.validateOnly) {
        validatePattern = _utils_KeyFilter__WEBPACK_IMPORTED_MODULE_3__["default"].validate(event, this.props.keyfilter);
      }

      if (this.props.onInput) {
        this.props.onInput(event, validatePattern);
      }

      if (!this.props.onChange) {
        if (event.target.value.length > 0) _utils_DomHandler__WEBPACK_IMPORTED_MODULE_5__["default"].addClass(event.target, 'p-filled');else _utils_DomHandler__WEBPACK_IMPORTED_MODULE_5__["default"].removeClass(event.target, 'p-filled');
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.tooltip) {
        this.renderTooltip();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.tooltip !== this.props.tooltip) {
        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.tooltip) {
        this.tooltip.destroy();
        this.tooltip = null;
      }
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip() {
      this.tooltip = new _utils_ToolTip__WEBPACK_IMPORTED_MODULE_4__["default"]({
        target: this.element,
        content: this.props.tooltip,
        options: this.props.tooltipOptions
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var className = classnames__WEBPACK_IMPORTED_MODULE_2___default()('p-inputtext p-component', this.props.className, {
        'p-disabled': this.props.disabled,
        'p-filled': this.props.value != null && this.props.value.toString().length > 0 || this.props.defaultValue != null && this.props.defaultValue.toString().length > 0
      });
      var inputProps = _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_6__["default"].findDiffKeys(this.props, InputText.defaultProps);
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", _extends({
        ref: function ref(el) {
          return _this2.element = el;
        }
      }, inputProps, {
        className: className,
        onInput: this.onInput,
        onKeyPress: this.onKeyPress
      }));
    }
  }]);

  return InputText;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);
InputText.defaultProps = {
  onInput: null,
  onKeyPress: null,
  keyfilter: null,
  validateOnly: false,
  tooltip: null,
  tooltipOptions: null
};
InputText.propTypes = {
  /**
   * Callback to invoke when input is in focus changes.
   */
  onInput: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Callback to invoke when value of input changes.
   */
  onKeyPress: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Filter value
   */
  keyfilter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,

  /**
   * Boolean
   */
  validateOnly: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * Tooltip text
   */
  tooltip: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Tooltip options. An object
   */
  tooltipOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object
};

/***/ }),

/***/ "./src/lib/components/ListBox/ListBox.css":
/*!************************************************!*\
  !*** ./src/lib/components/ListBox/ListBox.css ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./ListBox.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/ListBox/ListBox.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"insertAt":"top","hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(true) {
	module.hot.accept(/*! !../../../../node_modules/css-loader/dist/cjs.js!./ListBox.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/ListBox/ListBox.css", function() {
		var newContent = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./ListBox.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/ListBox/ListBox.css");

		if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/lib/components/ListBox/ListBox.js":
/*!***********************************************!*\
  !*** ./src/lib/components/ListBox/ListBox.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ListBox; });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ObjectUtils */ "./src/lib/utils/ObjectUtils.js");
/* harmony import */ var _utils_ToolTip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/ToolTip */ "./src/lib/utils/ToolTip.js");
/* harmony import */ var _ListBoxHeader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ListBoxHeader */ "./src/lib/components/ListBox/ListBoxHeader.js");
/* harmony import */ var _ListBoxItem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ListBoxItem */ "./src/lib/components/ListBox/ListBoxItem.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }








/**
 * ListBox component
 */

var ListBox =
/*#__PURE__*/
function (_Component) {
  _inherits(ListBox, _Component);

  function ListBox() {
    var _this;

    _classCallCheck(this, ListBox);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListBox).call(this));
    _this.state = {
      filter: ''
    };
    _this.onFilter = _this.onFilter.bind(_assertThisInitialized(_this));
    _this.onOptionClick = _this.onOptionClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ListBox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.tooltip) {
        this.renderTooltip();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.tooltip !== this.props.tooltip) {
        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.tooltip) {
        this.tooltip.destroy();
        this.tooltip = null;
      }
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip() {
      this.tooltip = new _utils_ToolTip__WEBPACK_IMPORTED_MODULE_4__["default"]({
        target: this.element,
        content: this.props.tooltip,
        options: this.props.tooltipOptions
      });
    }
  }, {
    key: "onOptionClick",
    value: function onOptionClick(event) {
      if (this.props.disabled) {
        return;
      }

      if (this.props.multiple) this.onOptionClickMultiple(event.originalEvent, event.option);else this.onOptionClickSingle(event.originalEvent, event.option);
      this.optionTouched = false;
    }
  }, {
    key: "onOptionTouchEnd",
    value: function onOptionTouchEnd(event, option) {
      if (this.props.disabled) {
        return;
      }

      this.optionTouched = true;
    }
  }, {
    key: "onOptionClickSingle",
    value: function onOptionClickSingle(event, option) {
      var selected = this.isSelected(option);
      var valueChanged = false;
      var value = null;
      var metaSelection = this.optionTouched ? false : this.props.metaKeySelection;

      if (metaSelection) {
        var metaKey = event.metaKey || event.ctrlKey;

        if (selected) {
          if (metaKey) {
            value = null;
            valueChanged = true;
          }
        } else {
          value = this.getOptionValue(option);
          valueChanged = true;
        }
      } else {
        value = selected ? null : this.getOptionValue(option);
        valueChanged = true;
      }

      if (valueChanged) {
        this.updateModel(event, value);
      }
    }
  }, {
    key: "onOptionClickMultiple",
    value: function onOptionClickMultiple(event, option) {
      var selected = this.isSelected(option);
      var valueChanged = false;
      var value = null;
      var metaSelection = this.optionTouched ? false : this.props.metaKeySelection;

      if (metaSelection) {
        var metaKey = event.metaKey || event.ctrlKey;

        if (selected) {
          if (metaKey) value = this.removeOption(option);else value = [this.getOptionValue(option)];
          valueChanged = true;
        } else {
          value = metaKey ? this.props.value || [] : [];
          value = [].concat(_toConsumableArray(value), [this.getOptionValue(option)]);
          valueChanged = true;
        }
      } else {
        if (selected) value = this.removeOption(option);else value = [].concat(_toConsumableArray(this.props.value || []), [this.getOptionValue(option)]);
        valueChanged = true;
      }

      if (valueChanged) {
        this.props.onChange({
          originalEvent: event,
          value: value,
          stopPropagation: function stopPropagation() {},
          preventDefault: function preventDefault() {},
          target: {
            name: this.props.name,
            id: this.props.id,
            value: value
          }
        });
      }
    }
  }, {
    key: "onFilter",
    value: function onFilter(event) {
      this.setState({
        filter: event.query
      });
    }
  }, {
    key: "updateModel",
    value: function updateModel(event, value) {
      if (this.props.onChange) {
        this.props.onChange({
          originalEvent: event,
          value: value,
          stopPropagation: function stopPropagation() {},
          preventDefault: function preventDefault() {},
          target: {
            name: this.props.name,
            id: this.props.id,
            value: value
          }
        });
      }
    }
  }, {
    key: "removeOption",
    value: function removeOption(option) {
      var _this2 = this;

      return this.props.value.filter(function (val) {
        return !_utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_3__["default"].equals(val, _this2.getOptionValue(option), _this2.props.dataKey);
      });
    }
  }, {
    key: "isSelected",
    value: function isSelected(option) {
      var selected = false;
      var optionValue = this.getOptionValue(option);

      if (this.props.multiple) {
        if (this.props.value) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this.props.value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var val = _step.value;

              if (_utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_3__["default"].equals(val, optionValue, this.props.dataKey)) {
                selected = true;
                break;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      } else {
        selected = _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_3__["default"].equals(this.props.value, optionValue, this.props.dataKey);
      }

      return selected;
    }
  }, {
    key: "filter",
    value: function filter(option) {
      var filterValue = this.state.filter.trim().toLowerCase();
      var optionLabel = this.getOptionLabel(option);
      return optionLabel.toLowerCase().indexOf(filterValue.toLowerCase()) > -1;
    }
  }, {
    key: "hasFilter",
    value: function hasFilter() {
      return this.state.filter && this.state.filter.trim().length > 0;
    }
  }, {
    key: "getOptionValue",
    value: function getOptionValue(option) {
      return this.props.optionLabel ? option : option.value;
    }
  }, {
    key: "getOptionLabel",
    value: function getOptionLabel(option) {
      return this.props.optionLabel ? _utils_ObjectUtils__WEBPACK_IMPORTED_MODULE_3__["default"].resolveFieldData(option, this.props.optionLabel) : option.label;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var className = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-listbox p-inputtext p-component', this.props.className, {
        'p-disabled': this.props.disabled
      });
      var items = this.props.options;
      var header;

      if (this.props.options) {
        if (this.hasFilter()) {
          items = items.filter(function (option) {
            return _this3.filter(option);
          });
        }

        items = items.map(function (option, index) {
          var optionLabel = _this3.getOptionLabel(option);

          return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_ListBoxItem__WEBPACK_IMPORTED_MODULE_6__["ListBoxItem"], {
            key: optionLabel,
            label: optionLabel,
            option: option,
            template: _this3.props.itemTemplate,
            selected: _this3.isSelected(option),
            onClick: _this3.onOptionClick,
            onTouchEnd: function onTouchEnd(e) {
              return _this3.onOptionTouchEnd(e, option, index);
            },
            tabIndex: _this3.props.tabIndex
          });
        });
      }

      if (this.props.filter) {
        header = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_ListBoxHeader__WEBPACK_IMPORTED_MODULE_5__["ListBoxHeader"], {
          filter: this.state.filter,
          onFilter: this.onFilter,
          disabled: this.props.disabled
        });
      }

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
        ref: function ref(el) {
          return _this3.element = el;
        },
        id: this.props.id,
        className: className,
        style: this.props.style
      }, header, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
        className: "p-listbox-list-wrapper",
        style: this.props.listContainerStyle
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("ul", {
        className: "p-listbox-list",
        style: this.props.listStyle
      }, items)));
    }
  }]);

  return ListBox;
}(react__WEBPACK_IMPORTED_MODULE_2__["Component"]);


ListBox.defaultProps = {
  id: null,
  value: null,
  options: null,
  optionLabel: null,
  itemTemplate: null,
  style: null,
  listStyle: null,
  className: null,
  disabled: null,
  dataKey: null,
  multiple: false,
  metaKeySelection: false,
  filter: false,
  tabIndex: '0',
  tooltip: null,
  tooltipOptions: null,
  onChange: null
};
ListBox.propTypes = {
  /**
   * Id: Unique identifier of the element.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Selected value to display.
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,

  /**
   * An array of objects to display as the available options.
   */
  options: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.array,

  /**
   * Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.
   */
  optionLabel: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Function that gets the option and returns the content for it.
   */
  itemTemplate: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Inline style of the element.
   */
  style: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,

  /**
   * Inline style of inner list element.
   */
  listStyle: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,

  /**
   * Style class of the element.
   */
  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * A property to uniquely match the value in options for better performance.
   */
  dataKey: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * When specified, allows selecting multiple values.
   */
  multiple: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * Defines how multiple items can be selected,
   * when true metaKey needs to be pressed to select or
   * unselect an item and when set to false selection of each item can be toggled individually.
   * On touch enabled devices, metaKeySelection is turned off automatically.
   */
  metaKeySelection: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * When specified, displays a filter input at header.
   */
  filter: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * Index of the element in tabbing order.
   */
  tabIndex: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Content of the tooltip.
   */
  tooltip: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Configuration of the tooltip, refer to the tooltip documentation for more information.
   */
  tooltipOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,

  /**
   * Callback to invoke when value of listbox changes.
   */
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * 	When specified, disables the component.
   */
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
  * Style class of the container.
  */
  listContainerStyle: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object
};

/***/ }),

/***/ "./src/lib/components/ListBox/ListBoxComponent.js":
/*!********************************************************!*\
  !*** ./src/lib/components/ListBox/ListBoxComponent.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ListBox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ListBox */ "./src/lib/components/ListBox/ListBox.js");
/* harmony import */ var _ListBox_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListBox.css */ "./src/lib/components/ListBox/ListBox.css");
/* harmony import */ var _ListBox_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ListBox_css__WEBPACK_IMPORTED_MODULE_3__);
var _ListBoxComponent$def;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Wrapper component for the listbox.Adds custom template and styling
 */

var ListBoxComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(ListBoxComponent, _Component);

  function ListBoxComponent() {
    _classCallCheck(this, ListBoxComponent);

    return _possibleConstructorReturn(this, _getPrototypeOf(ListBoxComponent).apply(this, arguments));
  }

  _createClass(ListBoxComponent, [{
    key: "sampleTemplate",
    value: function sampleTemplate(option) {
      var imagePath = option.imagePath;

      if (imagePath == undefined || imagePath.trim() == '') {
        return option.label;
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "p-clearfix"
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("img", {
        src: imagePath,
        style: {
          display: 'inline-block',
          margin: '5px 0 0 5px',
          width: 48
        }
      }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        style: {
          fontSize: '1em',
          "float": 'right',
          margin: '1em .5em 0 0'
        }
      }, option.label));
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "content-section implementation"
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_ListBox__WEBPACK_IMPORTED_MODULE_2__["default"], {
        id: this.props.id,
        value: this.props.value,
        filter: this.props.filter,
        options: this.props.options,
        onChange: function onChange(e) {
          return _this.props.setProps({
            value: e.value
          });
        },
        itemTemplate: this.sampleTemplate,
        style: this.props.style,
        listStyle: this.props.listStyle,
        listContainerStyle: this.props.listContainerStyle,
        multiple: this.props.multiple,
        disabled: this.props.disabled,
        tooltip: this.props.tooltip
      })));
    }
  }]);

  return ListBoxComponent;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

ListBoxComponent.defaultProps = (_ListBoxComponent$def = {
  listContainerStyle: {
    maxHeight: 500
  },
  id: null,
  value: null,
  options: null,
  filter: false,
  style: null,
  listStyle: null
}, _defineProperty(_ListBoxComponent$def, "listContainerStyle", null), _defineProperty(_ListBoxComponent$def, "multiple", false), _defineProperty(_ListBoxComponent$def, "disabled", false), _defineProperty(_ListBoxComponent$def, "tooltip", null), _ListBoxComponent$def);
ListBoxComponent.propTypes = {
  /**
   * Id: Unique identifier of the element.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Selected value to display.
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.any,

  /**
   * An array of objects to display as the available options.
   */
  options: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.array,

  /**
   * Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.
   */
  optionLabel: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Function that gets the option and returns the content for it.
   */
  itemTemplate: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func,

  /**
   * Inline style of the element.
   */
  style: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,

  /**
   * Inline style of inner list element.
   */
  listStyle: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,

  /**
   * Style class of the element.
   */
  className: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * A property to uniquely match the value in options for better performance.
   */
  dataKey: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * When specified, allows selecting multiple values.
   */
  multiple: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * Defines how multiple items can be selected,
   * when true metaKey needs to be pressed to select or
   * unselect an item and when set to false selection of each item can be toggled individually.
   * On touch enabled devices, metaKeySelection is turned off automatically.
   */
  metaKeySelection: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * When specified, displays a filter input at header.
   */
  filter: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * Index of the element in tabbing order.
   */
  tabIndex: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Content of the tooltip.
   */
  tooltip: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Configuration of the tooltip, refer to the tooltip documentation for more information.
   */
  tooltipOptions: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,

  /**
   * Callback to invoke when value of listbox changes.
   */
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func,

  /**
   * 	When specified, disables the component.
   */
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * Style class of the container.
   */
  listContainerStyle: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object
};
/* harmony default export */ __webpack_exports__["default"] = (ListBoxComponent);

/***/ }),

/***/ "./src/lib/components/ListBox/ListBoxHeader.js":
/*!*****************************************************!*\
  !*** ./src/lib/components/ListBox/ListBoxHeader.js ***!
  \*****************************************************/
/*! exports provided: ListBoxHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBoxHeader", function() { return ListBoxHeader; });
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Inputtext_InputText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Inputtext/InputText */ "./src/lib/components/Inputtext/InputText.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




/**
 * Header component of the listbox
 */

var ListBoxHeader =
/*#__PURE__*/
function (_Component) {
  _inherits(ListBoxHeader, _Component);

  function ListBoxHeader() {
    var _this;

    _classCallCheck(this, ListBoxHeader);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListBoxHeader).call(this));
    _this.onFilter = _this.onFilter.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ListBoxHeader, [{
    key: "onFilter",
    value: function onFilter(event) {
      if (this.props.onFilter) {
        this.props.onFilter({
          originalEvent: event,
          query: event.target.value
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "p-listbox-header"
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "p-listbox-filter-container"
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Inputtext_InputText__WEBPACK_IMPORTED_MODULE_2__["InputText"], {
        type: "text",
        role: "textbox",
        value: this.props.filter,
        onChange: this.onFilter,
        disabled: this.props.disabled
      }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "p-listbox-filter-icon pi pi-search"
      })));
    }
  }]);

  return ListBoxHeader;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);
ListBoxHeader.defaultProps = {
  filter: null,
  disabled: false,
  onFilter: null
};
ListBoxHeader.propTypes = {
  /**
   * When specified, displays a filter input at header.
   */
  filter: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * When specified, disables the component.
   */
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * Callback to invoke when value of filter list changes
   */
  onFilter: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func
};

/***/ }),

/***/ "./src/lib/components/ListBox/ListBoxItem.js":
/*!***************************************************!*\
  !*** ./src/lib/components/ListBox/ListBoxItem.js ***!
  \***************************************************/
/*! exports provided: ListBoxItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBoxItem", function() { return ListBoxItem; });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_DomHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/DomHandler */ "./src/lib/utils/DomHandler.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Component to render individual items in a list box
 */

var ListBoxItem =
/*#__PURE__*/
function (_Component) {
  _inherits(ListBoxItem, _Component);

  function ListBoxItem() {
    var _this;

    _classCallCheck(this, ListBoxItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListBoxItem).call(this));
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    _this.onTouchEnd = _this.onTouchEnd.bind(_assertThisInitialized(_this));
    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ListBoxItem, [{
    key: "onClick",
    value: function onClick(event) {
      if (this.props.onClick) {
        this.props.onClick({
          originalEvent: event,
          option: this.props.option
        });
      }

      event.preventDefault();
    }
  }, {
    key: "onTouchEnd",
    value: function onTouchEnd(event) {
      if (this.props.onTouchEnd) {
        this.props.onTouchEnd({
          originalEvent: event,
          option: this.props.option
        });
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var item = event.currentTarget;

      switch (event.which) {
        //down
        case 40:
          var nextItem = this.findNextItem(item);

          if (nextItem) {
            nextItem.focus();
          }

          event.preventDefault();
          break;
        //up

        case 38:
          var prevItem = this.findPrevItem(item);

          if (prevItem) {
            prevItem.focus();
          }

          event.preventDefault();
          break;
        //enter

        case 13:
          this.onClick(event);
          event.preventDefault();
          break;

        default:
          break;
      }
    }
  }, {
    key: "findNextItem",
    value: function findNextItem(item) {
      var nextItem = item.nextElementSibling;
      if (nextItem) return _utils_DomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].hasClass(nextItem, 'p-disabled') ? this.findNextItem(nextItem) : nextItem;else return null;
    }
  }, {
    key: "findPrevItem",
    value: function findPrevItem(item) {
      var prevItem = item.previousElementSibling;
      if (prevItem) return _utils_DomHandler__WEBPACK_IMPORTED_MODULE_3__["default"].hasClass(prevItem, 'p-disabled') ? this.findPrevItem(prevItem) : prevItem;else return null;
    }
  }, {
    key: "render",
    value: function render() {
      var className = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-listbox-item', {
        'p-highlight': this.props.selected
      });
      var content = this.props.template ? this.props.template(this.props.option) : this.props.label;
      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("li", {
        className: className,
        onClick: this.onClick,
        onTouchEnd: this.onTouchEnd,
        onKeyDown: this.onKeyDown,
        tabIndex: this.props.tabIndex
      }, content);
    }
  }]);

  return ListBoxItem;
}(react__WEBPACK_IMPORTED_MODULE_2__["Component"]);
ListBoxItem.defaultProps = {
  option: null,
  label: null,
  selected: false,
  tabIndex: null,
  onClick: null,
  onTouchEnd: null,
  template: null
};
ListBoxItem.propTypes = {
  /**
   * Listbox option
   */
  option: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,

  /**
   * Label to display
   */
  label: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Boolean. If the option has been selected or not
   */
  selected: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * Index of the option
   */
  tabIndex: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Callback to invoke when the option is clicked.
   */
  onClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Callback to invoke when the option is clicked.
   */
  onTouchEnd: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Template funtion to use
   */
  template: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func
};

/***/ }),

/***/ "./src/lib/components/OrganizationChart/OrganizationChart.css":
/*!********************************************************************!*\
  !*** ./src/lib/components/OrganizationChart/OrganizationChart.css ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./OrganizationChart.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/OrganizationChart/OrganizationChart.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"insertAt":"top","hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(true) {
	module.hot.accept(/*! !../../../../node_modules/css-loader/dist/cjs.js!./OrganizationChart.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/OrganizationChart/OrganizationChart.css", function() {
		var newContent = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./OrganizationChart.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/OrganizationChart/OrganizationChart.css");

		if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/lib/components/OrganizationChart/OrganizationChart.react.js":
/*!*************************************************************************!*\
  !*** ./src/lib/components/OrganizationChart/OrganizationChart.react.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OrganizationChart; });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var OrganizationChartNode =
/*#__PURE__*/
function (_Component) {
  _inherits(OrganizationChartNode, _Component);

  function OrganizationChartNode(props) {
    var _this;

    _classCallCheck(this, OrganizationChartNode);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrganizationChartNode).call(this, props));
    _this.node = _this.props.node;
    _this.state = {
      expanded: _this.node.expanded
    };
    return _this;
  }

  _createClass(OrganizationChartNode, [{
    key: "getLeaf",
    value: function getLeaf() {
      return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);
    }
  }, {
    key: "getColspan",
    value: function getColspan() {
      return this.node.children && this.node.children.length ? this.node.children.length * 2 : null;
    }
  }, {
    key: "onNodeClick",
    value: function onNodeClick(event, node) {
      this.props.onNodeClick(event, node);
    }
  }, {
    key: "toggleNode",
    value: function toggleNode(event, node) {
      var _expanded = !this.state.expanded;

      this.setState({
        expanded: _expanded
      });
      event.preventDefault();
    }
  }, {
    key: "isSelected",
    value: function isSelected() {
      return this.props.isSelected(this.node);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      this.node = this.props.node;
      var colspan = this.getColspan();
      var nodeStyleClass = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-organizationchart-node-content', this.node.className, {
        'p-organizationchart-selectable-node': this.props.selectionMode && this.node.selectable !== false,
        'p-highlight': this.isSelected()
      }),
          nodeLabel = this.props.nodeTemplate && this.props.nodeTemplate(this.node) ? react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", null, this.props.nodeTemplate(this.node)) : react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", null, this.node.label),
          toggleIcon = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-node-toggler-icon', {
        'pi pi-chevron-down ': this.state.expanded,
        'pi pi-chevron-up ': !this.state.expanded // 'pi pi-chevron-down arrow-down': this.state.expanded,
        // 'pi pi-chevron-up arrow-up': !this.state.expanded,

      }),
          nodeContent = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("td", {
        colSpan: colspan
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
        className: nodeStyleClass,
        onClick: function onClick(e) {
          return _this2.onNodeClick(e, _this2.node);
        }
      }, nodeLabel, !this.getLeaf() && react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("button", {
        className: "p-node-toggler p-link",
        onClick: function onClick(e) {
          return _this2.toggleNode(e, _this2.node);
        }
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("i", {
        className: toggleIcon
      })))));

      var _visibility = !this.getLeaf() && this.state.expanded ? 'inherit' : 'hidden',
          linesDown = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("tr", {
        style: {
          visibility: _visibility
        },
        className: "p-organizationchart-lines"
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("td", {
        colSpan: colspan
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
        className: "p-organizationchart-line-down"
      }))),
          nodeChildLength = this.node.children && this.node.children.length,
          linesMiddle = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("tr", {
        style: {
          visibility: _visibility
        },
        className: "p-organizationchart-lines"
      }, this.node.children && this.node.children.map(function (item, index) {
        var leftClass = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-organizationchart-line-left', {
          'p-organizationchart-line-top': index !== 0
        }),
            rightClass = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-organizationchart-line-right', {
          'p-organizationchart-line-top': index !== nodeChildLength - 1
        });
        return [react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("td", {
          key: index + '_lineleft',
          className: leftClass
        }, "\xA0"), react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("td", {
          key: index + '_lineright',
          className: rightClass
        }, "\xA0")];
      })),
          childNodes = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("tr", {
        style: {
          visibility: _visibility
        },
        className: "p-organizationchart-nodes"
      }, this.node.children && this.node.children.map(function (child, index) {
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("td", {
          key: index,
          colSpan: "2"
        }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(OrganizationChartNode, {
          node: child,
          nodeTemplate: _this2.props.nodeTemplate,
          selectionMode: _this2.props.selectionMode,
          onNodeClick: _this2.props.onNodeClick,
          isSelected: _this2.props.isSelected
        }));
      }));

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("table", {
        className: "p-organizationchart-table"
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("tbody", null, nodeContent, linesDown, linesMiddle, childNodes));
    }
  }]);

  return OrganizationChartNode;
}(react__WEBPACK_IMPORTED_MODULE_2__["Component"]);
/**
 * Organization Chart
 */


var OrganizationChart =
/*#__PURE__*/
function (_Component2) {
  _inherits(OrganizationChart, _Component2);

  function OrganizationChart(props) {
    var _this3;

    _classCallCheck(this, OrganizationChart);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(OrganizationChart).call(this, props));
    _this3.root = _this3.props.value && _this3.props.value.length ? _this3.props.value[0] : null;
    _this3.onNodeClick = _this3.onNodeClick.bind(_assertThisInitialized(_this3));
    _this3.isSelected = _this3.isSelected.bind(_assertThisInitialized(_this3));
    return _this3;
  }

  _createClass(OrganizationChart, [{
    key: "onNodeClick",
    value: function onNodeClick(event, node) {
      if (this.props.selectionMode) {
        var eventTarget = event.target;

        if (eventTarget.className && (eventTarget.className.indexOf('p-node-toggler') !== -1 || eventTarget.className.indexOf('p-node-toggler-icon') !== -1)) {
          return;
        }

        if (node.selectable === false) {
          return;
        }

        var index = this.findIndexInSelection(node);
        var selected = index >= 0;
        var selection;

        if (this.props.selectionMode === 'single') {
          if (selected) {
            selection = null;

            if (this.props.onNodeUnselect) {
              this.props.onNodeUnselect({
                originalEvent: event,
                node: node
              });
            }
          } else {
            selection = node;

            if (this.props.onNodeSelect) {
              this.props.onNodeSelect({
                originalEvent: event,
                node: node
              });
            }
          }
        } else if (this.props.selectionMode === 'multiple') {
          if (selected) {
            selection = this.props.selection.filter(function (val, i) {
              return i !== index;
            });

            if (this.props.onNodeUnselect) {
              this.props.onNodeUnselect({
                originalEvent: event,
                node: node
              });
            }
          } else {
            selection = [].concat(_toConsumableArray(this.props.selection || []), [node]);

            if (this.props.onNodeSelect) {
              this.props.onNodeSelect({
                originalEvent: event,
                node: node
              });
            }
          }
        }

        if (this.props.onSelectionChange) {
          this.props.onSelectionChange({
            originalEvent: event,
            data: selection
          });
        }
      }
    }
  }, {
    key: "findIndexInSelection",
    value: function findIndexInSelection(node) {
      var index = -1;

      if (this.props.selectionMode && this.props.selection) {
        if (this.props.selectionMode === 'single') {
          index = this.props.selection === node ? 0 : -1;
        } else if (this.props.selectionMode === 'multiple') {
          for (var i = 0; i < this.props.selection.length; i++) {
            if (this.props.selection[i] === node) {
              index = i;
              break;
            }
          }
        }
      }

      return index;
    }
  }, {
    key: "isSelected",
    value: function isSelected(node) {
      return this.findIndexInSelection(node) !== -1;
    }
  }, {
    key: "render",
    value: function render() {
      this.root = this.props.value && this.props.value.length ? this.props.value[0] : null;
      var className = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-organizationchart p-component', this.props.className);
      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
        id: this.props.id,
        style: this.props.style,
        className: className
      }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(OrganizationChartNode, {
        node: this.root,
        nodeTemplate: this.props.nodeTemplate,
        selectionMode: this.props.selectionMode,
        onNodeClick: this.onNodeClick,
        isSelected: this.isSelected
      }));
    }
  }]);

  return OrganizationChart;
}(react__WEBPACK_IMPORTED_MODULE_2__["Component"]);


OrganizationChartNode.defaultProps = {
  node: null,
  nodeTemplate: null,
  root: false,
  first: false,
  last: false,
  selectionMode: null,
  onNodeClick: null,
  isSelected: null
};
OrganizationChartNode.propTypes = {
  node: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,
  nodeTemplate: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,
  root: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
  first: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
  last: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,
  selectionMode: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,
  onNodeClick: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,
  isSelected: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func
};
OrganizationChart.defaultProps = {
  id: null,
  value: null,
  style: null,
  className: null,
  selectionMode: null,
  selection: null,
  nodeTemplate: null,
  onSelectionChange: null,
  onNodeSelect: null,
  onNodeUnselect: null
};
OrganizationChart.propTypes = {
  /**
   * The ID used to identify this component in Dash callbacks.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * An array of nested TreeNodes
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,

  /**
   * Inline style of the element.
   */
  style: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,

  /**
   * Css classes
   */
  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Defines the selection mode, valid values "single" and "multiple".
   */
  selectionMode: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * A single treenode instance or an array to refer to the selections.
   */
  selection: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,

  /**
   * 	Template function that gets a node as a parameter and returns a content.
   */
  nodeTemplate: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,

  /**
   * Callback to invoke when node selection changes.
   */
  onSelectionChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Callback to invoke when a node is unselected.
   */
  onNodeSelect: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func,

  /**
   * Callback to invoke when a node is selected.
   */
  onNodeUnselect: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func
};

/***/ }),

/***/ "./src/lib/components/OrganizationChart/OrganizationChartComponent.react.js":
/*!**********************************************************************************!*\
  !*** ./src/lib/components/OrganizationChart/OrganizationChartComponent.react.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OrganizationChartComponent; });
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _extra_dash_ui_components_nova_light_theme_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../extra_dash_ui_components/nova-light/theme.css */ "./extra_dash_ui_components/nova-light/theme.css");
/* harmony import */ var _extra_dash_ui_components_nova_light_theme_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_extra_dash_ui_components_nova_light_theme_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _extra_dash_ui_components_primeicons_primeicons_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../extra_dash_ui_components/primeicons/primeicons.css */ "./extra_dash_ui_components/primeicons/primeicons.css");
/* harmony import */ var _extra_dash_ui_components_primeicons_primeicons_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_extra_dash_ui_components_primeicons_primeicons_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _OrganizationChart_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./OrganizationChart.css */ "./src/lib/components/OrganizationChart/OrganizationChart.css");
/* harmony import */ var _OrganizationChart_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_OrganizationChart_css__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _OrganizationChart_react_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OrganizationChart.react.js */ "./src/lib/components/OrganizationChart/OrganizationChart.react.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







/**
 * OrganizationChartComponent is a component to nicely display a data tree.
 * It takes a property, `value`, which is the actual data object
 * creates a hierachy tree which is then rendered.
 * Other inputs are `selectionMode`, `selection`, `className` and `style`
 * which are optional. Defaults will be applied unless provided by the user.
 */

var OrganizationChartComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(OrganizationChartComponent, _Component);

  function OrganizationChartComponent() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, OrganizationChartComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OrganizationChartComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "nodeTemplate", function (node) {
      if (node.type === 'person') {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "node-card"
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "node-header"
        }, node.label), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "node-content"
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("img", {
          alt: node.data.avatar,
          src: node.data.avatar,
          style: {
            width: '60px',
            height: '60px'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, node.data.name)));
      } else {
        return node.label;
      }
    });

    return _this;
  }

  _createClass(OrganizationChartComponent, [{
    key: "render",
    value: function render() {
      if (this.props.value.length == 0) {
        return '';
      }

      var setProps = this.props.setProps;
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_OrganizationChart_react_js__WEBPACK_IMPORTED_MODULE_5__["default"], _extends({
        nodeTemplate: this.nodeTemplate,
        onSelectionChange: function onSelectionChange(event) {
          return setProps({
            selection: event.data
          });
        }
      }, this.props)));
    }
  }]);

  return OrganizationChartComponent;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);


OrganizationChartComponent.defaultProps = {
  id: "".concat(Math.random()),
  selectionMode: null,
  selection: null,
  className: null,
  style: null,
  setProps: function setProps() {}
};
OrganizationChartComponent.propTypes = {
  /**
   * The ID used to identify this component in Dash callbacks.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * An array of nested TreeNodes. A valid treenode should contain at least a `label` property.
   * Please check on sample data at /sample_data/org_data
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object),

  /**
   * Defines the selection mode, valid values "single" or "multiple".
   */
  selectionMode: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.oneOf(['single', 'multiple']),

  /**
   * A single treenode instance or an array to refer to the selections.
   */
  selection: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object)]),

  /**
   * Style class of the component.
   */
  className: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Inline style of the component.
   */
  style: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,

  /**
   * Dash-assigned callback that should be called to report property changes
   * to Dash, to make them available for callbacks.
   */
  setProps: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func
};

/***/ }),

/***/ "./src/lib/components/Rating/Rating.css":
/*!**********************************************!*\
  !*** ./src/lib/components/Rating/Rating.css ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./Rating.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Rating/Rating.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"insertAt":"top","hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(true) {
	module.hot.accept(/*! !../../../../node_modules/css-loader/dist/cjs.js!./Rating.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Rating/Rating.css", function() {
		var newContent = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./Rating.css */ "./node_modules/css-loader/dist/cjs.js!./src/lib/components/Rating/Rating.css");

		if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/lib/components/Rating/Rating.js":
/*!*********************************************!*\
  !*** ./src/lib/components/Rating/Rating.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Rating; });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_ToolTip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/ToolTip */ "./src/lib/utils/ToolTip.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





/**
 * Rating component
 * Displays rating
 */

var Rating =
/*#__PURE__*/
function (_Component) {
  _inherits(Rating, _Component);

  function Rating(props) {
    var _this;

    _classCallCheck(this, Rating);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Rating).call(this, props));
    _this.clear = _this.clear.bind(_assertThisInitialized(_this));
    _this.onStarKeyDown = _this.onStarKeyDown.bind(_assertThisInitialized(_this));
    _this.onCancelKeyDown = _this.onCancelKeyDown.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Rating, [{
    key: "rate",
    value: function rate(event, i) {
      if (!this.props.readonly && !this.props.disabled && this.props.onChange) {
        this.props.onChange({
          originalEvent: event,
          value: i,
          stopPropagation: function stopPropagation() {},
          preventDefault: function preventDefault() {},
          target: {
            name: this.props.name,
            id: this.props.id,
            value: i
          }
        });
      }

      event.preventDefault();
    }
  }, {
    key: "clear",
    value: function clear(event) {
      if (!this.props.readonly && !this.props.disabled && this.props.onChange) {
        this.props.onChange({
          originalEvent: event,
          value: null,
          stopPropagation: function stopPropagation() {},
          preventDefault: function preventDefault() {},
          target: {
            name: this.props.name,
            id: this.props.id,
            value: null
          }
        });
      }

      event.preventDefault();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (nextProps.value === this.props.value && nextProps.disabled === this.props.disabled) {
        return false;
      }

      return true;
    }
  }, {
    key: "onStarKeyDown",
    value: function onStarKeyDown(event, value) {
      if (event.key === 'Enter') {
        this.rate(event, value);
      }
    }
  }, {
    key: "onCancelKeyDown",
    value: function onCancelKeyDown(event) {
      if (event.key === 'Enter') {
        this.clear(event);
      }
    }
  }, {
    key: "renderStars",
    value: function renderStars() {
      var _this2 = this;

      var starsArray = [];

      for (var i = 0; i < this.props.stars; i++) {
        starsArray[i] = i + 1;
      }

      var stars = starsArray.map(function (value) {
        var iconClass = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-rating-icon pi', {
          'pi-star-o': !_this2.props.value || value > _this2.props.value,
          'pi-star': value <= _this2.props.value
        });
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span", {
          className: iconClass,
          onClick: function onClick(e) {
            return _this2.rate(e, value);
          },
          key: value,
          tabIndex: _this2.props.disabled || _this2.props.readonly ? null : '0',
          onKeyDown: function onKeyDown(e) {
            return _this2.onStarKeyDown(e, value);
          }
        });
      });
      return stars;
    }
  }, {
    key: "renderCancelIcon",
    value: function renderCancelIcon() {
      if (this.props.cancel) {
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span", {
          className: "p-rating-icon p-rating-cancel pi pi-ban",
          onClick: this.clear,
          tabIndex: this.props.disabled || this.props.readonly ? null : '0',
          onKeyDown: this.onCancelKeyDown
        });
      } else {
        return null;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.tooltip) {
        this.renderTooltip();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.tooltip !== this.props.tooltip) {
        if (this.tooltip) this.tooltip.updateContent(this.props.tooltip);else this.renderTooltip();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.tooltip) {
        this.tooltip.destroy();
        this.tooltip = null;
      }
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip() {
      this.tooltip = new _utils_ToolTip__WEBPACK_IMPORTED_MODULE_3__["default"]({
        target: this.element,
        content: this.props.tooltip,
        options: this.props.tooltipOptions
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var className = classnames__WEBPACK_IMPORTED_MODULE_0___default()('p-rating', this.props.className, {
        'p-disabled': this.props.disabled,
        'p-rating-readonly': this.props.readonly
      });
      var cancelIcon = this.renderCancelIcon();
      var stars = this.renderStars();
      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
        ref: function ref(el) {
          return _this3.element = el;
        },
        id: this.props.id,
        className: className,
        style: this.props.style
      }, cancelIcon, stars);
    }
  }]);

  return Rating;
}(react__WEBPACK_IMPORTED_MODULE_2__["Component"]);


Rating.defaultProps = {
  id: null,
  value: null,
  disabled: false,
  readonly: false,
  stars: 5,
  cancel: true,
  style: null,
  className: null,
  tooltip: null,
  tooltipOptions: null,
  onChange: null
};
Rating.propTypes = {
  /**
   * Unique identifier of the element.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Value of the rating.
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,

  /**
   * When present, it specifies that the element should be disabled.
   */
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * When present, changing the value is not possible.
   */
  readonly: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * Number of stars.
   */
  stars: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.number,

  /**
   * When specified a cancel icon is displayed to allow removing the value.
   */
  cancel: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool,

  /**
   * Inline style of the component.
   */
  style: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,

  /**
   * ClassName of the component.
   */
  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * Content of the tooltip.
   */
  tooltip: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,

  /**
   * 	Configuration of the tooltip, refer to the tooltip documentation for more information.
   */
  tooltipOptions: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,

  /**
   * Callback to invoke on value change.
   */
  onChange: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func
};

/***/ }),

/***/ "./src/lib/components/Rating/RatingComponent.js":
/*!******************************************************!*\
  !*** ./src/lib/components/Rating/RatingComponent.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RatingComponent; });
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Rating__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Rating */ "./src/lib/components/Rating/Rating.js");
/* harmony import */ var _Rating_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Rating.css */ "./src/lib/components/Rating/Rating.css");
/* harmony import */ var _Rating_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Rating_css__WEBPACK_IMPORTED_MODULE_3__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




 // import '../../../../test.css'

var RatingComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(RatingComponent, _Component);

  function RatingComponent() {
    _classCallCheck(this, RatingComponent);

    return _possibleConstructorReturn(this, _getPrototypeOf(RatingComponent).apply(this, arguments));
  }

  _createClass(RatingComponent, [{
    key: "render",
    value: function render() {
      var _this = this;

      console.log(this.props);
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "content-section implementation"
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Rating__WEBPACK_IMPORTED_MODULE_2__["default"], _extends({
        onChange: function onChange(e) {
          return _this.props.setProps({
            value: e.value
          });
        }
      }, this.props)));
    }
  }]);

  return RatingComponent;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);


RatingComponent.defaultProps = {
  id: null,
  value: null,
  disabled: false,
  readonly: false,
  stars: 5,
  cancel: true,
  style: null,
  className: null,
  tooltip: null,
  tooltipOptions: null,
  setProps: function setProps() {}
};
RatingComponent.propTypes = {
  /**
   * Unique identifier of the element.
   */
  id: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Value of the rating.
   */
  value: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.number,

  /**
   * When present, it specifies that the element should be disabled.
   */
  disabled: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * When present, changing the value is not possible.
   */
  readonly: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * Number of stars.
   */
  stars: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.number,

  /**
   * When specified a cancel icon is displayed to allow removing the value.
   */
  cancel: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.bool,

  /**
   * Inline style of the component.
   */
  style: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,

  /**
   * ClassName of the component.
   */
  className: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * Content of the tooltip.
   */
  tooltip: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string,

  /**
   * 	Configuration of the tooltip, refer to the tooltip documentation for more information.
   */
  tooltipOptions: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,

  /**
   * Dash-assigned callback that should be called to report property changes
   * to Dash, to make them available for callbacks.
   */
  setProps: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func
};

/***/ }),

/***/ "./src/lib/index.js":
/*!**************************!*\
  !*** ./src/lib/index.js ***!
  \**************************/
/*! exports provided: ExtraDashUiComponents, OrganizationChartComponent, ListBoxComponent, RatingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_ExtraDashUiComponents_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/ExtraDashUiComponents.react */ "./src/lib/components/ExtraDashUiComponents.react.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExtraDashUiComponents", function() { return _components_ExtraDashUiComponents_react__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _components_OrganizationChart_OrganizationChartComponent_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/OrganizationChart/OrganizationChartComponent.react */ "./src/lib/components/OrganizationChart/OrganizationChartComponent.react.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OrganizationChartComponent", function() { return _components_OrganizationChart_OrganizationChartComponent_react__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _components_ListBox_ListBoxComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/ListBox/ListBoxComponent */ "./src/lib/components/ListBox/ListBoxComponent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListBoxComponent", function() { return _components_ListBox_ListBoxComponent__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _components_Rating_RatingComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/Rating/RatingComponent */ "./src/lib/components/Rating/RatingComponent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RatingComponent", function() { return _components_Rating_RatingComponent__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* eslint-disable import/prefer-default-export */






/***/ }),

/***/ "./src/lib/utils/DomHandler.js":
/*!*************************************!*\
  !*** ./src/lib/utils/DomHandler.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DomHandler; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DomHandler =
/*#__PURE__*/
function () {
  function DomHandler() {
    _classCallCheck(this, DomHandler);
  }

  _createClass(DomHandler, null, [{
    key: "innerWidth",
    value: function innerWidth(el) {
      var width = el.offsetWidth;
      var style = getComputedStyle(el);
      width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
      return width;
    }
  }, {
    key: "width",
    value: function width(el) {
      var width = el.offsetWidth;
      var style = getComputedStyle(el);
      width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
      return width;
    }
  }, {
    key: "getWindowScrollTop",
    value: function getWindowScrollTop() {
      var doc = document.documentElement;
      return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
  }, {
    key: "getWindowScrollLeft",
    value: function getWindowScrollLeft() {
      var doc = document.documentElement;
      return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
  }, {
    key: "getOuterWidth",
    value: function getOuterWidth(el, margin) {
      if (el) {
        var width = el.offsetWidth;

        if (margin) {
          var style = getComputedStyle(el);
          width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }

        return width;
      } else {
        return 0;
      }
    }
  }, {
    key: "getOuterHeight",
    value: function getOuterHeight(el, margin) {
      if (el) {
        var height = el.offsetHeight;

        if (margin) {
          var style = getComputedStyle(el);
          height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }

        return height;
      } else {
        return 0;
      }
    }
  }, {
    key: "getClientHeight",
    value: function getClientHeight(el, margin) {
      if (el) {
        var height = el.clientHeight;

        if (margin) {
          var style = getComputedStyle(el);
          height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }

        return height;
      } else {
        return 0;
      }
    }
  }, {
    key: "getViewport",
    value: function getViewport() {
      var win = window,
          d = document,
          e = d.documentElement,
          g = d.getElementsByTagName('body')[0],
          w = win.innerWidth || e.clientWidth || g.clientWidth,
          h = win.innerHeight || e.clientHeight || g.clientHeight;
      return {
        width: w,
        height: h
      };
    }
  }, {
    key: "getOffset",
    value: function getOffset(el) {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top + document.body.scrollTop,
        left: rect.left + document.body.scrollLeft
      };
    }
  }, {
    key: "generateZIndex",
    value: function generateZIndex() {
      this.zindex = this.zindex || 999;
      return ++this.zindex;
    }
  }, {
    key: "getCurrentZIndex",
    value: function getCurrentZIndex() {
      return this.zindex;
    }
  }, {
    key: "index",
    value: function index(element) {
      var children = element.parentNode.childNodes;
      var num = 0;

      for (var i = 0; i < children.length; i++) {
        if (children[i] === element) return num;
        if (children[i].nodeType === 1) num++;
      }

      return -1;
    }
  }, {
    key: "addMultipleClasses",
    value: function addMultipleClasses(element, className) {
      if (element.classList) {
        var styles = className.split(' ');

        for (var i = 0; i < styles.length; i++) {
          element.classList.add(styles[i]);
        }
      } else {
        var _styles = className.split(' ');

        for (var _i = 0; _i < _styles.length; _i++) {
          element.className += ' ' + _styles[_i];
        }
      }
    }
  }, {
    key: "addClass",
    value: function addClass(element, className) {
      if (element.classList) element.classList.add(className);else element.className += ' ' + className;
    }
  }, {
    key: "removeClass",
    value: function removeClass(element, className) {
      if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  }, {
    key: "hasClass",
    value: function hasClass(element, className) {
      if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
    }
  }, {
    key: "find",
    value: function find(element, selector) {
      return Array.from(element.querySelectorAll(selector));
    }
  }, {
    key: "findSingle",
    value: function findSingle(element, selector) {
      if (element) {
        return element.querySelector(selector);
      }

      return null;
    }
  }, {
    key: "getHeight",
    value: function getHeight(el) {
      var height = el.offsetHeight;
      var style = getComputedStyle(el);
      height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
      return height;
    }
  }, {
    key: "getWidth",
    value: function getWidth(el) {
      var width = el.offsetWidth;
      var style = getComputedStyle(el);
      width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
      return width;
    }
  }, {
    key: "absolutePosition",
    value: function absolutePosition(element, target) {
      var elementDimensions = element.offsetParent ? {
        width: element.offsetWidth,
        height: element.offsetHeight
      } : this.getHiddenElementDimensions(element);
      var elementOuterHeight = elementDimensions.height;
      var elementOuterWidth = elementDimensions.width;
      var targetOuterHeight = target.offsetHeight;
      var targetOuterWidth = target.offsetWidth;
      var targetOffset = target.getBoundingClientRect();
      var windowScrollTop = this.getWindowScrollTop();
      var windowScrollLeft = this.getWindowScrollLeft();
      var viewport = this.getViewport();
      var top, left;

      if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
        top = targetOffset.top + windowScrollTop - elementOuterHeight;

        if (top < 0) {
          top = windowScrollTop;
        }
      } else {
        top = targetOuterHeight + targetOffset.top + windowScrollTop;
      }

      if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width) left = Math.max(0, targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth);else left = targetOffset.left + windowScrollLeft;
      element.style.top = top + 'px';
      element.style.left = left + 'px';
    }
  }, {
    key: "relativePosition",
    value: function relativePosition(element, target) {
      var elementDimensions = element.offsetParent ? {
        width: element.offsetWidth,
        height: element.offsetHeight
      } : this.getHiddenElementDimensions(element);
      var targetHeight = target.offsetHeight;
      var targetOffset = target.getBoundingClientRect();
      var viewport = this.getViewport();
      var top, left;

      if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {
        top = -1 * elementDimensions.height;

        if (targetOffset.top + top < 0) {
          top = -1 * targetOffset.top;
        }
      } else {
        top = targetHeight;
      }

      if (elementDimensions.width > viewport.width) {
        // element wider then viewport and cannot fit on screen (align at left side of viewport)
        left = targetOffset.left * -1;
      } else if (targetOffset.left + elementDimensions.width > viewport.width) {
        // element wider then viewport but can be fit on screen (align at right side of viewport)
        left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;
      } else {
        // element fits on screen (align with target)
        left = 0;
      }

      element.style.top = top + 'px';
      element.style.left = left + 'px';
    }
  }, {
    key: "getHiddenElementOuterHeight",
    value: function getHiddenElementOuterHeight(element) {
      element.style.visibility = 'hidden';
      element.style.display = 'block';
      var elementHeight = element.offsetHeight;
      element.style.display = 'none';
      element.style.visibility = 'visible';
      return elementHeight;
    }
  }, {
    key: "getHiddenElementOuterWidth",
    value: function getHiddenElementOuterWidth(element) {
      element.style.visibility = 'hidden';
      element.style.display = 'block';
      var elementWidth = element.offsetWidth;
      element.style.display = 'none';
      element.style.visibility = 'visible';
      return elementWidth;
    }
  }, {
    key: "getHiddenElementDimensions",
    value: function getHiddenElementDimensions(element) {
      var dimensions = {};
      element.style.visibility = 'hidden';
      element.style.display = 'block';
      dimensions.width = element.offsetWidth;
      dimensions.height = element.offsetHeight;
      element.style.display = 'none';
      element.style.visibility = 'visible';
      return dimensions;
    }
  }, {
    key: "fadeIn",
    value: function fadeIn(element, duration) {
      element.style.opacity = 0;
      var last = +new Date();
      var opacity = 0;

      var tick = function tick() {
        opacity = +element.style.opacity + (new Date().getTime() - last) / duration;
        element.style.opacity = opacity;
        last = +new Date();

        if (+opacity < 1) {
          window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
        }
      };

      tick();
    }
  }, {
    key: "fadeOut",
    value: function fadeOut(element, ms) {
      var opacity = 1,
          interval = 50,
          duration = ms,
          gap = interval / duration;
      var fading = setInterval(function () {
        opacity -= gap;

        if (opacity <= 0) {
          opacity = 0;
          clearInterval(fading);
        }

        element.style.opacity = opacity;
      }, interval);
    }
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return navigator.userAgent;
    }
  }, {
    key: "isIOS",
    value: function isIOS() {
      return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window['MSStream'];
    }
  }, {
    key: "isAndroid",
    value: function isAndroid() {
      return /(android)/i.test(navigator.userAgent);
    }
  }, {
    key: "appendChild",
    value: function appendChild(element, target) {
      if (this.isElement(target)) target.appendChild(element);else if (target.el && target.el.nativeElement) target.el.nativeElement.appendChild(element);else throw new Error('Cannot append ' + target + ' to ' + element);
    }
  }, {
    key: "scrollInView",
    value: function scrollInView(container, item) {
      var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
      var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
      var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
      var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
      var containerRect = container.getBoundingClientRect();
      var itemRect = item.getBoundingClientRect();
      var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
      var scroll = container.scrollTop;
      var elementHeight = container.clientHeight;
      var itemHeight = this.getOuterHeight(item);

      if (offset < 0) {
        container.scrollTop = scroll + offset;
      } else if (offset + itemHeight > elementHeight) {
        container.scrollTop = scroll + offset - elementHeight + itemHeight;
      }
    }
  }, {
    key: "clearSelection",
    value: function clearSelection() {
      if (window.getSelection) {
        if (window.getSelection().empty) {
          window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
          window.getSelection().removeAllRanges();
        }
      } else if (document['selection'] && document['selection'].empty) {
        try {
          document['selection'].empty();
        } catch (error) {//ignore IE bug
        }
      }
    }
  }, {
    key: "calculateScrollbarWidth",
    value: function calculateScrollbarWidth(el) {
      if (el) {
        var style = getComputedStyle(el);
        return el.offsetWidth - el.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth);
      } else {
        if (this.calculatedScrollbarWidth != null) return this.calculatedScrollbarWidth;
        var scrollDiv = document.createElement("div");
        scrollDiv.className = "p-scrollbar-measure";
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
      }
    }
  }, {
    key: "getBrowser",
    value: function getBrowser() {
      if (!this.browser) {
        var matched = this.resolveUserAgent();
        this.browser = {};

        if (matched.browser) {
          this.browser[matched.browser] = true;
          this.browser['version'] = matched.version;
        }

        if (this.browser['chrome']) {
          this.browser['webkit'] = true;
        } else if (this.browser['webkit']) {
          this.browser['safari'] = true;
        }
      }

      return this.browser;
    }
  }, {
    key: "resolveUserAgent",
    value: function resolveUserAgent() {
      var ua = navigator.userAgent.toLowerCase();
      var match = /(chrome)[ ]([\w.]+)/.exec(ua) || /(webkit)[ ]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ ]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
      return {
        browser: match[1] || "",
        version: match[2] || "0"
      };
    }
  }, {
    key: "isVisible",
    value: function isVisible(element) {
      return element.offsetParent != null;
    }
  }]);

  return DomHandler;
}();



/***/ }),

/***/ "./src/lib/utils/KeyFilter.js":
/*!************************************!*\
  !*** ./src/lib/utils/KeyFilter.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return KeyFilter; });
/* harmony import */ var _DomHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DomHandler */ "./src/lib/utils/DomHandler.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var KeyFilter =
/*#__PURE__*/
function () {
  function KeyFilter() {
    _classCallCheck(this, KeyFilter);
  }

  _createClass(KeyFilter, null, [{
    key: "isNavKeyPress",

    /* eslint-disable */

    /* eslint-enable */
    value: function isNavKeyPress(e) {
      var k = e.keyCode;
      k = _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getBrowser().safari ? KeyFilter.SAFARI_KEYS[k] || k : k;
      return k >= 33 && k <= 40 || k === KeyFilter.KEYS.RETURN || k === KeyFilter.KEYS.TAB || k === KeyFilter.KEYS.ESC;
    }
  }, {
    key: "isSpecialKey",
    value: function isSpecialKey(e) {
      var k = e.keyCode;
      return k === 9 || k === 13 || k === 27 || k === 16 || k === 17 || k >= 18 && k <= 20 || _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getBrowser().opera && !e.shiftKey && (k === 8 || k >= 33 && k <= 35 || k >= 36 && k <= 39 || k >= 44 && k <= 45);
    }
  }, {
    key: "getKey",
    value: function getKey(e) {
      var k = e.keyCode || e.charCode;
      return _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getBrowser().safari ? KeyFilter.SAFARI_KEYS[k] || k : k;
    }
  }, {
    key: "getCharCode",
    value: function getCharCode(e) {
      return e.charCode || e.keyCode || e.which;
    }
  }, {
    key: "onKeyPress",
    value: function onKeyPress(e, keyfilter, validateOnly) {
      if (validateOnly) {
        return;
      }

      var regex = KeyFilter.DEFAULT_MASKS[keyfilter] ? KeyFilter.DEFAULT_MASKS[keyfilter] : keyfilter;
      var browser = _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getBrowser();

      if (e.ctrlKey || e.altKey) {
        return;
      }

      var k = this.getKey(e);

      if (browser.mozilla && (this.isNavKeyPress(e) || k === KeyFilter.KEYS.BACKSPACE || k === KeyFilter.KEYS.DELETE && e.charCode === 0)) {
        return;
      }

      var c = this.getCharCode(e);
      var cc = String.fromCharCode(c);

      if (browser.mozilla && (this.isSpecialKey(e) || !cc)) {
        return;
      }

      if (!regex.test(cc)) {
        e.preventDefault();
      }
    }
  }, {
    key: "validate",
    value: function validate(e, keyfilter) {
      var value = e.target.value,
          validatePattern = true;

      if (value && !keyfilter.test(value)) {
        validatePattern = false;
      }

      return validatePattern;
    }
  }]);

  return KeyFilter;
}();

_defineProperty(KeyFilter, "DEFAULT_MASKS", {
  pint: /[\d]/,
  "int": /[\d\-]/,
  pnum: /[\d\.]/,
  money: /[\d\.\s,]/,
  num: /[\d\-\.]/,
  hex: /[0-9a-f]/i,
  email: /[a-z0-9_\.\-@]/i,
  alpha: /[a-z_]/i,
  alphanum: /[a-z0-9_]/i
});

_defineProperty(KeyFilter, "KEYS", {
  TAB: 9,
  RETURN: 13,
  ESC: 27,
  BACKSPACE: 8,
  DELETE: 46
});

_defineProperty(KeyFilter, "SAFARI_KEYS", {
  63234: 37,
  // left
  63235: 39,
  // right
  63232: 38,
  // up
  63233: 40,
  // down
  63276: 33,
  // page up
  63277: 34,
  // page down
  63272: 46,
  // delete
  63273: 36,
  // home
  63275: 35 // end

});



/***/ }),

/***/ "./src/lib/utils/ObjectUtils.js":
/*!**************************************!*\
  !*** ./src/lib/utils/ObjectUtils.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ObjectUtils; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ObjectUtils =
/*#__PURE__*/
function () {
  function ObjectUtils() {
    _classCallCheck(this, ObjectUtils);
  }

  _createClass(ObjectUtils, null, [{
    key: "equals",
    value: function equals(obj1, obj2, field) {
      if (field) return this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field);else return this.deepEquals(obj1, obj2);
    }
  }, {
    key: "deepEquals",
    value: function deepEquals(a, b) {
      if (a === b) return true;

      if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
        var arrA = Array.isArray(a),
            arrB = Array.isArray(b),
            i,
            length,
            key;

        if (arrA && arrB) {
          length = a.length;
          if (length !== b.length) return false;

          for (i = length; i-- !== 0;) {
            if (!this.deepEquals(a[i], b[i])) return false;
          }

          return true;
        }

        if (arrA !== arrB) return false;
        var dateA = a instanceof Date,
            dateB = b instanceof Date;
        if (dateA !== dateB) return false;
        if (dateA && dateB) return a.getTime() === b.getTime();
        var regexpA = a instanceof RegExp,
            regexpB = b instanceof RegExp;
        if (regexpA !== regexpB) return false;
        if (regexpA && regexpB) return a.toString() === b.toString();
        var keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;) {
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        }

        for (i = length; i-- !== 0;) {
          key = keys[i];
          if (!this.deepEquals(a[key], b[key])) return false;
        }

        return true;
      }
      /*eslint no-self-compare: "off"*/


      return a !== a && b !== b;
    }
  }, {
    key: "resolveFieldData",
    value: function resolveFieldData(data, field) {
      if (data && field) {
        if (this.isFunction(field)) {
          return field(data);
        } else if (field.indexOf('.') === -1) {
          return data[field];
        } else {
          var fields = field.split('.');
          var value = data;

          for (var i = 0, len = fields.length; i < len; ++i) {
            if (value == null) {
              return null;
            }

            value = value[fields[i]];
          }

          return value;
        }
      } else {
        return null;
      }
    }
  }, {
    key: "isFunction",
    value: function isFunction(obj) {
      return !!(obj && obj.constructor && obj.call && obj.apply);
    }
  }, {
    key: "findDiffKeys",
    value: function findDiffKeys(obj1, obj2) {
      if (!obj1 || !obj2) {
        return {};
      }

      return Object.keys(obj1).filter(function (key) {
        return !obj2.hasOwnProperty(key);
      }).reduce(function (result, current) {
        result[current] = obj1[current];
        return result;
      }, {});
    }
  }, {
    key: "filter",
    value: function filter(value, fields, filterValue) {
      var filteredItems = [];

      if (value) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = fields[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var field = _step2.value;

                if (String(this.resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {
                  filteredItems.push(item);
                  break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return filteredItems;
    }
  }, {
    key: "reorderArray",
    value: function reorderArray(value, from, to) {
      var target;

      if (value && from !== to) {
        if (to >= value.length) {
          target = to - value.length;

          while (target-- + 1) {
            value.push(undefined);
          }
        }

        value.splice(to, 0, value.splice(from, 1)[0]);
      }
    }
  }, {
    key: "findIndexInList",
    value: function findIndexInList(value, list) {
      var index = -1;

      if (list) {
        for (var i = 0; i < list.length; i++) {
          if (list[i] === value) {
            index = i;
            break;
          }
        }
      }

      return index;
    }
  }]);

  return ObjectUtils;
}();

_defineProperty(ObjectUtils, "filterConstraints", {
  startsWith: function startsWith(value, filter) {
    if (filter === undefined || filter === null || filter.trim() === '') {
      return true;
    }

    if (value === undefined || value === null) {
      return false;
    }

    var filterValue = filter.toLowerCase();
    return value.toString().toLowerCase().slice(0, filterValue.length) === filterValue;
  },
  contains: function contains(value, filter) {
    if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
      return true;
    }

    if (value === undefined || value === null) {
      return false;
    }

    return value.toString().toLowerCase().indexOf(filter.toLowerCase()) !== -1;
  },
  endsWith: function endsWith(value, filter) {
    if (filter === undefined || filter === null || filter.trim() === '') {
      return true;
    }

    if (value === undefined || value === null) {
      return false;
    }

    var filterValue = filter.toString().toLowerCase();
    return value.toString().toLowerCase().indexOf(filterValue, value.toString().length - filterValue.length) !== -1;
  },
  equals: function equals(value, filter) {
    if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
      return true;
    }

    if (value === undefined || value === null) {
      return false;
    }

    return value.toString().toLowerCase() === filter.toString().toLowerCase();
  },
  notEquals: function notEquals(value, filter) {
    if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
      return false;
    }

    if (value === undefined || value === null) {
      return true;
    }

    return value.toString().toLowerCase() !== filter.toString().toLowerCase();
  },
  "in": function _in(value, filter) {
    if (filter === undefined || filter === null || filter.length === 0) {
      return true;
    }

    if (value === undefined || value === null) {
      return false;
    }

    for (var i = 0; i < filter.length; i++) {
      if (filter[i] === value) return true;
    }

    return false;
  }
});



/***/ }),

/***/ "./src/lib/utils/ToolTip.js":
/*!**********************************!*\
  !*** ./src/lib/utils/ToolTip.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Tooltip; });
/* harmony import */ var _DomHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DomHandler */ "./src/lib/utils/DomHandler.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Tooltip =
/*#__PURE__*/
function () {
  function Tooltip(props) {
    _classCallCheck(this, Tooltip);

    this.target = props.target;
    this.targetContainer = props.targetContainer;
    this.content = props.content;
    this.options = props.options || {};
    this.options.event = this.options.event || 'hover';
    this.options.position = this.options.position || 'right';
    this.bindEvents();
  }

  _createClass(Tooltip, [{
    key: "bindEvents",
    value: function bindEvents() {
      if (this.options.event === 'hover') {
        this.mouseEnterListener = this.onMouseEnter.bind(this);
        this.mouseLeaveListener = this.onMouseLeave.bind(this);
        this.clickListener = this.onClick.bind(this);
        this.target.addEventListener('mouseenter', this.mouseEnterListener);
        this.target.addEventListener('mouseleave', this.mouseLeaveListener);
        this.target.addEventListener('click', this.clickListener);
      } else if (this.options.event === 'focus') {
        this.focusListener = this.onFocus.bind(this);
        this.blurListener = this.onBlur.bind(this);
        this.target.addEventListener('focus', this.focusListener);
        this.target.addEventListener('blur', this.blurListener);
      }
    }
  }, {
    key: "unbindEvents",
    value: function unbindEvents() {
      if (this.options.event === 'hover') {
        this.target.removeEventListener('mouseenter', this.mouseEnterListener);
        this.target.removeEventListener('mouseleave', this.mouseLeaveListener);
        this.target.removeEventListener('click', this.clickListener);
      } else if (this.options.event === 'focus') {
        this.target.removeEventListener('focus', this.focusListener);
        this.target.removeEventListener('blur', this.blurListener);
      }

      this.unbindDocumentResizeListener();
    }
  }, {
    key: "onMouseEnter",
    value: function onMouseEnter() {
      if (!this.container && !this.showTimeout) {
        this.activate();
      }
    }
  }, {
    key: "onMouseLeave",
    value: function onMouseLeave() {
      this.deactivate();
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.activate();
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.deactivate();
    }
  }, {
    key: "onClick",
    value: function onClick() {
      this.deactivate();
    }
  }, {
    key: "activate",
    value: function activate() {
      var _this = this;

      this.clearHideTimeout();
      if (this.options.showDelay) this.showTimeout = setTimeout(function () {
        _this.show();
      }, this.options.showDelay);else this.show();
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      var _this2 = this;

      this.clearShowTimeout();
      if (this.options.hideDelay) this.hideTimeout = setTimeout(function () {
        _this2.hide();
      }, this.options.hideDelay);else this.hide();
    }
  }, {
    key: "clearShowTimeout",
    value: function clearShowTimeout() {
      if (this.showTimeout) {
        clearTimeout(this.showTimeout);
        this.showTimeout = null;
      }
    }
  }, {
    key: "clearHideTimeout",
    value: function clearHideTimeout() {
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = null;
      }
    }
  }, {
    key: "clearTimeouts",
    value: function clearTimeouts() {
      this.clearShowTimeout();
      this.clearHideTimeout();
    }
  }, {
    key: "updateContent",
    value: function updateContent(content) {
      this.content = content;
    }
  }, {
    key: "show",
    value: function show() {
      if (!this.content) {
        return;
      }

      this.create();
      this.align();
      _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].fadeIn(this.container, 250);
      this.container.style.zIndex = ++_DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].zindex;
      this.bindDocumentResizeListener();
    }
  }, {
    key: "hide",
    value: function hide() {
      this.remove();
    }
  }, {
    key: "create",
    value: function create() {
      this.container = document.createElement('div');
      var tooltipArrow = document.createElement('div');
      tooltipArrow.className = 'p-tooltip-arrow';
      this.container.appendChild(tooltipArrow);
      this.tooltipText = document.createElement('div');
      this.tooltipText.className = 'p-tooltip-text'; //todo: JSX support

      this.tooltipText.innerHTML = this.content;
      this.container.appendChild(this.tooltipText);
      document.body.appendChild(this.container);
      this.container.style.display = 'inline-block';
    }
  }, {
    key: "remove",
    value: function remove() {
      if (this.container && this.container.parentElement) {
        document.body.removeChild(this.container);
      }

      this.unbindDocumentResizeListener();
      this.clearTimeouts();
      this.container = null;
    }
  }, {
    key: "align",
    value: function align() {
      switch (this.options.position) {
        case 'top':
          this.alignTop();

          if (this.isOutOfBounds()) {
            this.alignBottom();
          }

          break;

        case 'bottom':
          this.alignBottom();

          if (this.isOutOfBounds()) {
            this.alignTop();
          }

          break;

        case 'left':
          this.alignLeft();

          if (this.isOutOfBounds()) {
            this.alignRight();

            if (this.isOutOfBounds()) {
              this.alignTop();

              if (this.isOutOfBounds()) {
                this.alignBottom();
              }
            }
          }

          break;

        case 'right':
          this.alignRight();

          if (this.isOutOfBounds()) {
            this.alignLeft();

            if (this.isOutOfBounds()) {
              this.alignTop();

              if (this.isOutOfBounds()) {
                this.alignBottom();
              }
            }
          }

          break;

        default:
          throw new Error('Invalid position:' + this.options.position);
      }
    }
  }, {
    key: "getHostOffset",
    value: function getHostOffset() {
      var target = this.targetContainer || this.target;
      var offset = target.getBoundingClientRect();
      var targetLeft = offset.left + _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getWindowScrollLeft();
      var targetTop = offset.top + _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getWindowScrollTop();
      return {
        left: targetLeft,
        top: targetTop
      };
    }
  }, {
    key: "alignRight",
    value: function alignRight() {
      this.preAlign('right');
      var target = this.targetContainer || this.target;
      var hostOffset = this.getHostOffset();
      var left = hostOffset.left + _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(target);
      var top = hostOffset.top + (_DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(target) - _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(this.container)) / 2;
      this.container.style.left = left + 'px';
      this.container.style.top = top + 'px';
    }
  }, {
    key: "alignLeft",
    value: function alignLeft() {
      this.preAlign('left');
      var target = this.targetContainer || this.target;
      var hostOffset = this.getHostOffset();
      var left = hostOffset.left - _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(this.container);
      var top = hostOffset.top + (_DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(target) - _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(this.container)) / 2;
      this.container.style.left = left + 'px';
      this.container.style.top = top + 'px';
    }
  }, {
    key: "alignTop",
    value: function alignTop() {
      this.preAlign('top');
      var target = this.targetContainer || this.target;
      var hostOffset = this.getHostOffset();
      var left = hostOffset.left + (_DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(target) - _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(this.container)) / 2;
      var top = hostOffset.top - _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(this.container);
      this.container.style.left = left + 'px';
      this.container.style.top = top + 'px';
    }
  }, {
    key: "alignBottom",
    value: function alignBottom() {
      this.preAlign('bottom');
      var target = this.targetContainer || this.target;
      var hostOffset = this.getHostOffset();
      var left = hostOffset.left + (_DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(target) - _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(this.container)) / 2;
      var top = hostOffset.top + _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(target);
      this.container.style.left = left + 'px';
      this.container.style.top = top + 'px';
    }
  }, {
    key: "preAlign",
    value: function preAlign(position) {
      this.container.style.left = -999 + 'px';
      this.container.style.top = -999 + 'px';
      var defaultClassName = 'p-tooltip p-component p-tooltip-' + position;
      this.container.className = this.options.className ? defaultClassName + ' ' + this.options.className : defaultClassName;
    }
  }, {
    key: "isOutOfBounds",
    value: function isOutOfBounds() {
      var offset = this.container.getBoundingClientRect();
      var targetTop = offset.top;
      var targetLeft = offset.left;
      var width = _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterWidth(this.container);
      var height = _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getOuterHeight(this.container);
      var viewport = _DomHandler__WEBPACK_IMPORTED_MODULE_0__["default"].getViewport();
      return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;
    }
  }, {
    key: "bindDocumentResizeListener",
    value: function bindDocumentResizeListener() {
      this.resizeListener = this.onWindowResize.bind(this);
      window.addEventListener('resize', this.resizeListener);
    }
  }, {
    key: "unbindDocumentResizeListener",
    value: function unbindDocumentResizeListener() {
      if (this.resizeListener) {
        window.removeEventListener('resize', this.resizeListener);
        this.resizeListener = null;
      }
    }
  }, {
    key: "onWindowResize",
    value: function onWindowResize() {
      this.hide();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.unbindEvents();
      this.remove();
      this.target = null;
      this.targetContainer = null;
    }
  }]);

  return Tooltip;
}();



/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,